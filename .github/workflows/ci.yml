name: rin-ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add concurrency control to prevent redundant workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup and basic checks job - runs on all events
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          # Install Maven
          sudo apt-get update
          sudo apt-get install -y maven
          
          # Install Python dependencies
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          
          # Install Python packages with new setup script
          if [ -f "bin/install-python-packages.sh" ]; then
            chmod +x bin/install-python-packages.sh
            ./bin/install-python-packages.sh --verbose
          elif [ -f "python/setup.py" ]; then
            # Fallback to legacy installation
            SETUP_PACKAGE=rinna pip install -e python/
            SETUP_PACKAGE=lucidchart-py pip install -e python/
          fi

      - name: Make scripts executable
        run: |
          chmod +x bin/rinna-tests.sh
          chmod +x bin/rin
          chmod +x bin/rin-build
          chmod +x bin/rin-test
          chmod +x bin/polyglot-coverage.sh
          chmod +x bin/python-quality 2>/dev/null || true
          chmod +x api/build.sh 2>/dev/null || true

      - name: Compile Java modules
        run: |
          echo "Compiling rinna-core module..."
          cd rinna-core && mvn -B -DskipTests compile
          
          echo "Compiling rinna-cli module..."
          cd ../rinna-cli && mvn -B -DskipTests compile
          
          echo "Compiling rinna-data-sqlite module..."
          cd ../rinna-data-sqlite && mvn -B -DskipTests compile || true
      
      - name: Compile Go code
        run: cd api && go build ./...

  # Fast tests (unit + component) - run on every push
  fast-tests:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Make scripts executable
        run: chmod +x bin/test-failure-notify.sh
      
      - name: Run smoke tests
        run: mvn test -P smoke-tests
        continue-on-error: true

      - name: Run unit tests
        run: ./bin/rin-test unit || ./bin/rin-build test unit
        continue-on-error: true

      - name: Run component tests
        run: ./bin/rin-test component || ./bin/rin-build test component
        continue-on-error: true

      - name: Basic Go tests
        run: cd api && go test ./test/simple -v
        continue-on-error: true
        
      - name: Check for test failures and send notifications
        run: |
          chmod +x bin/test-failure-notify.sh
          ./bin/test-failure-notify.sh --reports-dir target/surefire-reports --notify-method slack --slack-webhook ${{ secrets.SLACK_WEBHOOK_URL }} --ci
        continue-on-error: true
        
      - name: Generate code coverage report
        run: ./bin/polyglot-coverage.sh --ci -o json
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: |
            target/coverage/coverage.json
            target/coverage/html/
            
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: target/surefire-reports/

  # Integration tests - run on pull requests only
  integration-tests:
    needs: fast-tests
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Make scripts executable
        run: chmod +x bin/test-failure-notify.sh
      
      - name: Run integration tests
        run: ./bin/rin-test integration || ./bin/rin-build test integration
        continue-on-error: true
      
      - name: API Integration tests
        run: cd api && go test ./test/integration -v
        continue-on-error: true
        
      - name: Check for test failures and send notifications
        run: |
          ./bin/test-failure-notify.sh --reports-dir target/surefire-reports --notify-method slack --slack-webhook ${{ secrets.SLACK_WEBHOOK_URL }} --ci --summary-only
        continue-on-error: true
        
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-reports
          path: target/surefire-reports/

  # Acceptance tests - run on pull requests only
  acceptance-tests:
    needs: fast-tests
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Make scripts executable
        run: chmod +x bin/test-failure-notify.sh
      
      - name: Run acceptance tests
        run: ./bin/rin-build test acceptance
        continue-on-error: true
        
      - name: Check for test failures and send notifications
        run: |
          ./bin/test-failure-notify.sh --reports-dir target/surefire-reports --notify-method slack --slack-webhook ${{ secrets.SLACK_WEBHOOK_URL }} --ci --summary-only
        continue-on-error: true
        
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: acceptance-test-reports
          path: target/surefire-reports/
        
  # Performance tests - run only on release branches
  performance-tests:
    needs: [fast-tests, integration-tests, acceptance-tests]
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Make scripts executable
        run: chmod +x bin/test-failure-notify.sh
      
      - name: Run performance tests
        run: ./bin/rin-build test performance
        continue-on-error: true
        
      - name: Check for test failures and send notifications
        run: |
          ./bin/test-failure-notify.sh --reports-dir target/surefire-reports --notify-method slack --slack-webhook ${{ secrets.SLACK_WEBHOOK_URL }} --ci --threshold 1
        continue-on-error: true
        
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-reports
          path: target/surefire-reports/
        
  # Code quality report - runs on every pull request
  code-quality:
    if: github.event_name == 'pull_request'
    needs: [fast-tests, integration-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: code-coverage-report
          path: target/coverage
      
      - name: Generate comprehensive code coverage report
        run: ./bin/polyglot-coverage.sh -o html --ci
      
      - name: Add coverage report comment to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverageJson = JSON.parse(fs.readFileSync('target/coverage/coverage.json', 'utf8'));
            
            const overall = coverageJson.summary.overall;
            const java = coverageJson.languages.java.coverage;
            const go = coverageJson.languages.go.coverage;
            const python = coverageJson.languages.python.coverage;
            const threshold = coverageJson.summary.threshold;
            const status = coverageJson.summary.status ? '✅ Passed' : '❌ Failed';
            
            const body = `## Code Coverage Report
            
            | Language | Coverage | Threshold | Status |
            | -------- | -------- | --------- | ------ |
            | Overall | ${overall}% | ${threshold}% | ${status} |
            | Java | ${java}% | ${coverageJson.languages.java.threshold}% | ${coverageJson.languages.java.status ? '✅' : '❌'} |
            | Go | ${go}% | ${coverageJson.languages.go.threshold}% | ${coverageJson.languages.go.status ? '✅' : '❌'} |
            | Python | ${python}% | ${coverageJson.languages.python.threshold}% | ${coverageJson.languages.python.status ? '✅' : '❌'} |
            
            ${!coverageJson.summary.status ? '⚠️ Coverage is below the threshold. Please add more tests or request a threshold adjustment.' : ''}
            
            [See detailed coverage report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
      
      - name: Run other quality checks
        run: ./bin/run-quality-checks.sh --ci