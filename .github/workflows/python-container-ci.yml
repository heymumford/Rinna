name: Python Container CI

on:
  push:
    branches: [ main ]
    paths:
      - 'python/**'
      - 'requirements*.txt'
      - 'bin/test-python-pyramid.sh'
      - 'bin/run-python-container.sh'
      - 'bin/cache-python-image.sh'
      - '.github/workflows/python-container-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'python/**'
      - 'requirements*.txt'
      - 'bin/test-python-pyramid.sh'
      - 'bin/run-python-container.sh'
      - 'bin/cache-python-image.sh'
      - '.github/workflows/python-container-ci.yml'
  workflow_dispatch:

# Add concurrency control to prevent redundant workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Container image tags
  DEV_IMAGE_TAG: rinna-python-dev:${{ github.sha }}
  TEST_IMAGE_TAG: rinna-python-tests:${{ github.sha }}
  PROD_IMAGE_TAG: rinna-python:${{ github.sha }}
  REGISTRY: ghcr.io
  IMAGE_PATH: ${{ github.repository_owner }}/rinna

jobs:
  # Build the base container image
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      test_image: ${{ env.REGISTRY }}/${{ env.IMAGE_PATH }}/test:${{ github.sha }}
      prod_image: ${{ env.REGISTRY }}/${{ env.IMAGE_PATH }}/prod:${{ github.sha }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for test image
      id: meta-test
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PATH }}/test
        tags: |
          type=sha,prefix=,format=short
          type=ref,event=branch,prefix=,suffix=-test
          type=ref,event=pr,prefix=pr-,suffix=-test

    - name: Extract metadata for production image
      id: meta-prod
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PATH }}/prod
        tags: |
          type=sha,prefix=,format=short
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-
          type=semver,pattern={{version}}
          latest

    - name: Build and push test image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./python/Dockerfile
        push: true
        tags: ${{ steps.meta-test.outputs.tags }}
        labels: ${{ steps.meta-test.outputs.labels }}
        target: test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./python/Dockerfile.prod
        push: true
        tags: ${{ steps.meta-prod.outputs.tags }}
        labels: ${{ steps.meta-prod.outputs.labels }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Run unit and component tests using container
  fast-tests:
    needs: build-image
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.test_image }}
      options: --user 1001:1001
    steps:
      - name: Run unit tests
        run: /app/bin/test-python-pyramid.sh --isolated --no-install unit
        
      - name: Run component tests
        run: /app/bin/test-python-pyramid.sh --isolated --no-install component
        
      - name: Save test results
        uses: actions/upload-artifact@v3
        with:
          name: python-fast-test-results
          path: |
            /app/test-output/
            /app/coverage/

  # Run integration tests
  integration-tests:
    needs: [build-image, fast-tests]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.test_image }}
      options: --user 1001:1001
    steps:
      - name: Run integration tests
        run: /app/bin/test-python-pyramid.sh --isolated --no-install integration
        
      - name: Save test results
        uses: actions/upload-artifact@v3
        with:
          name: python-integration-test-results
          path: |
            /app/test-output/
            /app/coverage/

  # Run acceptance tests
  acceptance-tests:
    needs: [build-image, fast-tests]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.test_image }}
      options: --user 1001:1001
    steps:
      - name: Run acceptance tests
        run: /app/bin/test-python-pyramid.sh --isolated --no-install acceptance
        
      - name: Save test results
        uses: actions/upload-artifact@v3
        with:
          name: python-acceptance-test-results
          path: |
            /app/test-output/
            /app/coverage/

  # Run performance tests
  performance-tests:
    needs: [build-image, integration-tests]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.test_image }}
      options: --user 1001:1001
    steps:
      - name: Run performance tests
        run: /app/bin/test-python-pyramid.sh --isolated --no-install performance
        
      - name: Save test results
        uses: actions/upload-artifact@v3
        with:
          name: python-performance-test-results
          path: |
            /app/test-output/
            /app/coverage/

  # Final validation and report
  validate:
    needs: [fast-tests, integration-tests, acceptance-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results
      
      - name: Generate combined report
        run: |
          echo "## Python Container Test Results" > report.md
          echo "" >> report.md
          echo "| Test Type | Status | Coverage |" >> report.md
          echo "| --------- | ------ | -------- |" >> report.md
          
          # Process unit tests
          if [ -d "test-results/python-fast-test-results" ]; then
            echo "| Unit & Component | ✅ Passed | $(cat test-results/python-fast-test-results/coverage/coverage.txt 2>/dev/null || echo 'N/A') |" >> report.md
          else
            echo "| Unit & Component | ❌ Failed | N/A |" >> report.md
          fi
          
          # Process integration tests
          if [ -d "test-results/python-integration-test-results" ]; then
            echo "| Integration | ✅ Passed | $(cat test-results/python-integration-test-results/coverage/coverage.txt 2>/dev/null || echo 'N/A') |" >> report.md
          else
            echo "| Integration | ❌ Failed | N/A |" >> report.md
          fi
          
          # Process acceptance tests
          if [ -d "test-results/python-acceptance-test-results" ]; then
            echo "| Acceptance | ✅ Passed | $(cat test-results/python-acceptance-test-results/coverage/coverage.txt 2>/dev/null || echo 'N/A') |" >> report.md
          else
            echo "| Acceptance | ❌ Failed | N/A |" >> report.md
          fi
          
          cat report.md
      
      - name: Create deployment summary
        if: github.ref == 'refs/heads/main'
        run: |
          echo "## Deployment Information" > deploy.md
          echo "" >> deploy.md
          echo "Container images are ready for deployment:" >> deploy.md
          echo "" >> deploy.md
          echo "**Test Environment Image:**" >> deploy.md
          echo "\`${{ needs.build-image.outputs.test_image }}\`" >> deploy.md
          echo "" >> deploy.md
          echo "**Production Environment Image:**" >> deploy.md
          echo "\`${{ needs.build-image.outputs.prod_image }}\`" >> deploy.md
          echo "" >> deploy.md
          echo "To deploy to QA environment:" >> deploy.md
          echo "\`\`\`bash" >> deploy.md
          echo "# Example deployment command" >> deploy.md
          echo "kubectl set image deployment/rinna-python-service python-service=${{ needs.build-image.outputs.prod_image }}" >> deploy.md
          echo "\`\`\`" >> deploy.md
          
          cat deploy.md
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportContent
            });