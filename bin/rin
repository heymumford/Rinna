#!/usr/bin/env bash

#
# rin - Rinna CLI utility
#
# PURPOSE: Command-line utility to simplify building, cleaning, and running tests for Rinna
# with configurable output verbosity levels.
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Default settings
VERBOSE=0
ERRORS_ONLY=0
RUN_TESTS=0
BUILD=0
CLEAN=0
TEST_TYPE="all"
TARGET_DIR="./target"
RINNA_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Help text
function show_help {
    echo -e "${BLUE}rin${NC} - Rinna CLI utility"
    echo
    echo "Usage: rin [options] [command]"
    echo 
    echo "Commands:"
    echo "  build     Build the project"
    echo "  clean     Clean the project"
    echo "  test      Run tests (all tests by default)"
    echo "    unit         Run unit tests only"
    echo "    bdd          Run BDD tests only"
    echo "    workflow     Run workflow BDD tests only"
    echo "    release      Run release BDD tests only"
    echo "  all       Clean, build, and test (default if no command specified)"
    echo "  version   Version management:"
    echo "    current       Show current version information"
    echo "    major         Bump major version (x.0.0)"
    echo "    minor         Bump minor version (0.x.0)"
    echo "    patch         Bump patch version (0.0.x)"
    echo "    set <version> Set to specific version (e.g., 1.2.3)"
    echo "    release       Create a release from current version"
    echo "    tag           Create a git tag for current version"
    echo
    echo "Options:"
    echo "  -v, --verbose    Show all output"
    echo "  -e, --errors     Show only errors and related output"
    echo "  -t, --terse      Show minimal output (default)"
    echo "  -h, --help       Show this help message"
    echo
    echo "Examples:"
    echo "  rin test                  # Run tests with terse output"
    echo "  rin -v clean build        # Clean and build with verbose output"
    echo "  rin --errors all          # Run all with errors-only output"
    echo "  rin version current       # Check current version information"
    echo "  rin version minor -m msg  # Bump minor version with commit message"
    echo
}

# Parse arguments
VERSION_COMMAND=""
VERSION_ARGS=""

while [[ $# -gt 0 ]]; do
    case $1 in
        build)
            BUILD=1
            shift
            ;;
        clean)
            CLEAN=1
            shift
            ;;
        test)
            # Check for test type
            if [[ $2 == "unit" ]]; then
                RUN_TESTS=1
                TEST_TYPE="unit"
                shift 2
            elif [[ $2 == "bdd" ]]; then
                RUN_TESTS=1
                TEST_TYPE="bdd"
                shift 2
            elif [[ $2 == "workflow" ]]; then
                RUN_TESTS=1
                TEST_TYPE="workflow"
                shift 2
            elif [[ $2 == "release" ]]; then
                RUN_TESTS=1
                TEST_TYPE="release"
                shift 2
            else
                RUN_TESTS=1
                TEST_TYPE="all"
                shift
            fi
            ;;
        all)
            CLEAN=1
            BUILD=1
            RUN_TESTS=1
            TEST_TYPE="all"
            shift
            ;;
        version)
            # Collect all version-related arguments
            VERSION_COMMAND="version"
            shift
            while [[ $# -gt 0 && "$1" != "build" && "$1" != "clean" && "$1" != "test" && "$1" != "all" ]]; do
                VERSION_ARGS="$VERSION_ARGS $1"
                shift
            done
            ;;
        -v|--verbose)
            VERBOSE=1
            ERRORS_ONLY=0
            shift
            ;;
        -e|--errors)
            ERRORS_ONLY=1
            VERBOSE=0
            shift
            ;;
        -t|--terse)
            VERBOSE=0
            ERRORS_ONLY=0
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# If no commands specified, do everything
if [[ $CLEAN -eq 0 && $BUILD -eq 0 && $RUN_TESTS -eq 0 && -z "$VERSION_COMMAND" ]]; then
    CLEAN=1
    BUILD=1
    RUN_TESTS=1
fi

# Go to the Rinna directory
cd "$RINNA_DIR"

# Handle version command if specified
if [[ -n "$VERSION_COMMAND" ]]; then
    # Check if rin-version exists and is executable
    if [[ -x "$RINNA_DIR/bin/rin-version" ]]; then
        exec "$RINNA_DIR/bin/rin-version" $VERSION_ARGS
    else
        echo -e "${RED}Error: bin/rin-version script not found or not executable${NC}"
        exit 1
    fi
fi

# Function to run a command with appropriate output based on verbosity
function run_cmd {
    local cmd="$1"
    local description="$2"
    local start_time=$(date +%s)
    
    echo -e "${BLUE}[$description]${NC}"
    
    if [[ $VERBOSE -eq 1 ]]; then
        # Show all output
        eval "$cmd"
        EXIT_CODE=$?
    elif [[ $ERRORS_ONLY -eq 1 ]]; then
        # Capture output and only show on error
        OUTPUT=$(eval "$cmd" 2>&1)
        EXIT_CODE=$?
        if [[ $EXIT_CODE -ne 0 ]]; then
            echo -e "${RED}Error in $description:${NC}"
            echo "$OUTPUT"
        fi
    else
        # Terse mode - minimal output, show errors
        # We pipe the output to a temporary file so we can still capture it
        temp_output=$(mktemp)
        eval "$cmd" > "$temp_output" 2>&1
        EXIT_CODE=$?
        
        if [[ $EXIT_CODE -ne 0 ]]; then
            echo -e "${RED}Error in $description:${NC}"
            cat "$temp_output"
        elif [[ $cmd == *"test"* ]]; then
            # For test commands, show a summary even on success
            grep -E "Tests run:|Running |FAILURE|ERROR" "$temp_output" || true
        fi
        
        rm -f "$temp_output"
    fi
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    if [[ $EXIT_CODE -eq 0 ]]; then
        echo -e "${GREEN}✓ $description completed successfully in ${duration}s${NC}"
    else
        echo -e "${RED}✗ $description failed in ${duration}s${NC}"
        exit $EXIT_CODE
    fi
}

# Clean if requested
if [[ $CLEAN -eq 1 ]]; then
    run_cmd "./mvnw clean" "Cleaning project"
fi

# Build if requested
if [[ $BUILD -eq 1 ]]; then
    run_cmd "./mvnw compile" "Building project"
fi

# Run tests if requested
if [[ $RUN_TESTS -eq 1 ]]; then
    # Set up test command based on test type
    if [[ $TEST_TYPE == "unit" ]]; then
        TEST_CMD="./mvnw -Dtest=\"*Test\" test"
        TEST_DESC="Running unit tests"
    elif [[ $TEST_TYPE == "bdd" ]]; then
        TEST_CMD="./bin/run-bdd-tests.sh"
        TEST_DESC="Running BDD tests"
    elif [[ $TEST_TYPE == "workflow" ]]; then
        TEST_CMD="./bin/run-bdd-tests.sh workflow"
        TEST_DESC="Running workflow BDD tests"
    elif [[ $TEST_TYPE == "release" ]]; then
        TEST_CMD="./bin/run-bdd-tests.sh release"
        TEST_DESC="Running release BDD tests"
    else
        TEST_CMD="./mvnw test"
        TEST_DESC="Running all tests"
    fi
    
    # Run tests with appropriate verbosity
    if [[ $VERBOSE -eq 1 ]]; then
        run_cmd "$TEST_CMD" "$TEST_DESC"
    elif [[ $ERRORS_ONLY -eq 1 ]]; then
        run_cmd "$TEST_CMD -q" "$TEST_DESC"
    else
        # Terse mode - show minimal output
        run_cmd "$TEST_CMD" "$TEST_DESC"
    fi
    
    # Show test summary regardless of verbosity
    if [[ -d target/surefire-reports || -d rinna-core/target/surefire-reports ]]; then
        echo -e "${BLUE}[Test Summary]${NC}"
        failed_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; | wc -l)
        if [[ $failed_tests -gt 0 ]]; then
            find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; | while read file; do
                TEST_NAME=$(basename "$file" | sed 's/TEST-//' | sed 's/\.xml//')
                echo -e "${RED}FAILED: $TEST_NAME${NC}"
            done
        fi
        
        # Show test counts
        total_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f | wc -l)
        passed_tests=$((total_tests - failed_tests))
        
        echo -e "${GREEN}Tests passed: $passed_tests${NC}, ${RED}Tests failed: $failed_tests${NC}, Total: $total_tests"
    fi
fi

echo -e "${GREEN}All operations completed successfully!${NC}"