#!/usr/bin/env bash

#
# rin - Rinna CLI utility
#
# PURPOSE: Command-line utility to simplify Rinna operations with a unified interface
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Determine script and project directories
# Resolve symlinks to find the actual script directory
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
RINNA_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
FIRST_RUN_MARKER="$HOME/.config/rinna/first_run_complete"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print error and exit
error() {
  echo -e "${RED}Error: $1${NC}" >&2
  exit 1
}

# Check if we need to run setup and init
check_first_run() {
  # Create config directory if it doesn't exist
  mkdir -p "$(dirname "$FIRST_RUN_MARKER")"
  
  if [[ ! -f "$FIRST_RUN_MARKER" ]]; then
    echo -e "${BLUE}=====================================================${NC}"
    echo -e "${BLUE}         First run of Rinna CLI detected!            ${NC}"
    echo -e "${BLUE}=====================================================${NC}"
    
    # Check if we have the graphical installer
    GRAPHICS_INSTALLER="$SCRIPT_DIR/install-rinna.sh"
    if [[ -x "$GRAPHICS_INSTALLER" ]]; then
      echo -e "Starting interactive graphical installer..."
      if "$GRAPHICS_INSTALLER"; then
        touch "$FIRST_RUN_MARKER"
      fi
    else
      # Fall back to standard installer if graphics not available
      echo -e "Checking your environment for dependencies..."
      echo
      
      if [[ -x "$SCRIPT_DIR/rin-setup" ]]; then
        if "$SCRIPT_DIR/rin-setup" "install"; then
          echo "Dependencies ready!"
        else
          echo -e "${YELLOW}Warning: Some dependencies could not be installed automatically.${NC}"
          echo -e "You may need to install them manually. Continue with 'rin setup' later."
        fi
      else
        echo -e "${YELLOW}Warning: Setup script not found or not executable.${NC}"
        echo -e "You may need to install dependencies manually."
      fi
    fi
    
    echo
    echo -e "${BLUE}=====================================================${NC}"
    echo -e "${BLUE}         Welcome to Rinna CLI!                       ${NC}"
    echo -e "${BLUE}=====================================================${NC}"
    echo
    
    # Initialize Rinna with the user's credentials
    if [[ -x "$SCRIPT_DIR/rin-init" ]]; then
      echo -e "Setting up Rinna with your user credentials..."
      echo
      "$SCRIPT_DIR/rin-init"
      # Create marker after initialization
      touch "$FIRST_RUN_MARKER"
    else
      echo -e "${YELLOW}Warning: Automatic initialization not available.${NC}"
      echo -e "You should run 'rin init' to set up your workspace."
      # Create marker anyway to avoid repeated messages
      touch "$FIRST_RUN_MARKER"
    fi
  fi
}

# Show help text
show_help() {
  cat << EOF
${BLUE}rin${NC} - Rinna CLI utility

Usage: rin [command] [options]

Commands:
  build     Build operations:
    clean         Clean the project
    compile       Compile the source code
    test          Run tests (all tests by default)
    package       Package the application
    all           Clean, compile, test
    
  version   Version management:
    current       Show current version information
    major         Bump major version (x.0.0)
    minor         Bump minor version (0.x.0)
    patch         Bump patch version (0.0.x)
    set <version> Set to specific version
    verify        Verify version consistency
    update        Update all files to match version.properties
    
  init      Initialize Rinna for the current user
    --username    Override detected username
    --project     Override detected project name
    --force       Reinitialize even if already initialized
    
  auth      Authentication and authorization:
    status        Show authentication status (default)
    verify        Verify authentication
    permissions   Show detailed permissions
    
  workspace Workspace management:
    status        Show workspace status (default)
    list          List available workspaces
    create        Create a new workspace
    switch <name> Switch to another workspace
    
  Work Item Management:
    list          List work items with optional filtering
    add           Add a new work item
    view          View details of a work item
    update        Update an existing work item
    
  doc       Document generation:
    license <key> Set Docmosis license key
    config        Show document configuration
    templates     Show available templates
    generate      Generate documents
    
  setup     Environment management:
    install       Install missing dependencies without prompting
    check         Check for missing dependencies without installing
    config        Create or edit configuration file
    test          Test the development environment
    python        Set up Python virtual environment with dependencies
    graphics      Run the interactive graphical installer
      -f, --fast    Use fast mode (no animations, text-only output)
      --quick       Use quicker animation speed
    
  config    Configuration management:
    view          View effective configuration
    get <key>     Get a specific configuration value
    set <key>     Set a configuration value
    validate      Validate the current configuration
    generate      Generate language-specific configurations
    create-env    Create a template environment config
    
  diagrams  Architecture visualization:
    --setup       Configure LucidChart API credentials
    --force       Generate diagrams without credentials check
  
Test Categories:
  unit            Run unit tests only
  component       Run component tests only
  integration     Run integration tests only
  acceptance      Run acceptance tests (same as bdd)
  bdd             Run BDD/acceptance tests (legacy alias)
  performance     Run performance tests only
  
  # Legacy Domain-Specific Test Categories:
  workflow        Run workflow BDD tests
  release         Run release BDD tests
  input           Run input interface BDD tests
  api             Run API integration BDD tests
  cli             Run CLI integration BDD tests
  tag:<name>      Run tests with specific tag

Options:
  --version       Show version information
  -v, --verbose   Show detailed output
  -t, --terse     Show minimal output (default)
  -e, --errors    Show only errors
  -h, --help      Show this help message

Examples:
  rin init                        # Initialize Rinna for first use
  rin list                        # List work items
  rin add --title "Task" --type TASK # Add a work item
  rin auth status                 # Show authentication status
  rin workspace status            # Show workspace status
  rin build test                  # Run tests
  rin build all -v                # Clean, compile, test with verbose output
  rin version patch               # Bump patch version
  rin setup                       # Check and install missing dependencies
  rin config view                 # View current configuration
  rin diagrams                    # Generate architecture diagrams
EOF
}

# Main execution
if [[ $# -eq 0 ]]; then
  show_help
  exit 0
fi

# Process short flags like -v for version
if [[ $1 == "-v" ]]; then
  # For backward compatibility, -v is treated as --version
  CATEGORY="--version"
  shift
else
  # First argument is the command category
  CATEGORY="$1"
  shift
fi

# Run first time setup if needed
check_first_run

# Dispatch to appropriate tool
case "$CATEGORY" in
  build)
    if [[ -x "$SCRIPT_DIR/rin-build" ]]; then
      exec "$SCRIPT_DIR/rin-build" "$@"
    else
      error "bin/rin-build not found or not executable"
    fi
    ;;
  version)
    if [[ -x "$SCRIPT_DIR/rin-version" ]]; then
      exec "$SCRIPT_DIR/rin-version" "$@"
    else
      error "bin/rin-version not found or not executable"
    fi
    ;;
  doc|document)
    if [[ -x "$SCRIPT_DIR/rin-doc" ]]; then
      exec "$SCRIPT_DIR/rin-doc" "$@"
    else
      error "bin/rin-doc not found or not executable"
    fi
    ;;
  setup)
    if [[ -x "$SCRIPT_DIR/rin-setup" ]]; then
      exec "$SCRIPT_DIR/rin-setup" "$@"
    else
      error "bin/rin-setup not found or not executable"
    fi
    ;;
  config)
    if [[ -x "$SCRIPT_DIR/rin-config" ]]; then
      exec "$SCRIPT_DIR/rin-config" "$@"
    else
      error "bin/rin-config not found or not executable"
    fi
    ;;
  diagrams)
    if [[ -x "$SCRIPT_DIR/rin-diagrams" ]]; then
      exec "$SCRIPT_DIR/rin-diagrams" "$@"
    else
      error "bin/rin-diagrams not found or not executable"
    fi
    ;;
  init)
    # Initialize Rinna 
    if [[ -x "$SCRIPT_DIR/rin-init" ]]; then
      exec "$SCRIPT_DIR/rin-init" "$@"
    else
      error "bin/rin-init not found or not executable"
    fi
    ;;
  auth)
    # Authentication management
    if [[ -x "$SCRIPT_DIR/rin-auth" ]]; then
      exec "$SCRIPT_DIR/rin-auth" "$@"
    else
      error "bin/rin-auth not found or not executable"
    fi
    ;;
  workspace)
    # Workspace management
    if [[ -x "$SCRIPT_DIR/rin-workspace" ]]; then
      exec "$SCRIPT_DIR/rin-workspace" "$@"
    else
      error "bin/rin-workspace not found or not executable"
    fi
    ;;
  list)
    # List work items command
    if [[ -x "$SCRIPT_DIR/rin-list" ]]; then
      exec "$SCRIPT_DIR/rin-list" "$@"
    else
      error "bin/rin-list not found or not executable"
    fi
    ;;
  add)
    # Add work item command
    if [[ -x "$SCRIPT_DIR/rin-add" ]]; then
      exec "$SCRIPT_DIR/rin-add" "$@"
    else
      error "bin/rin-add not found or not executable"
    fi
    ;;
  view|update)
    # Other work item commands - handled by rin-cli
    if [[ -x "$SCRIPT_DIR/rin-cli" ]]; then
      exec "$SCRIPT_DIR/rin-cli" "$CATEGORY" "$@"
    else
      error "bin/rin-cli not found or not executable"
    fi
    ;;
  --version)
    # Handle version flag by using the version command
    if [[ -x "$SCRIPT_DIR/rin-version" ]]; then
      exec "$SCRIPT_DIR/rin-version" "current"
    else
      error "bin/rin-version not found or not executable at $SCRIPT_DIR"
    fi
    ;;
  -h|--help)
    show_help
    exit 0
    ;;
  test)
    # Check for CLI test option
    if [[ $1 == "cli" ]]; then
      shift
      if [[ -x "$SCRIPT_DIR/run-new-tests.sh" ]]; then
        exec "$SCRIPT_DIR/run-new-tests.sh" "$@"
      else
        error "bin/run-new-tests.sh not found or not executable"
      fi
    # Handle test command specially - use the new rin-test if available
    elif [[ -x "$SCRIPT_DIR/rin-test" ]]; then
      exec "$SCRIPT_DIR/rin-test" "$@"
    elif [[ -x "$SCRIPT_DIR/rin-build" ]]; then
      # Fall back to rin-build for legacy support
      exec "$SCRIPT_DIR/rin-build" "test" "$@"
    else
      error "Neither bin/rin-test nor bin/rin-build found or not executable"
    fi
    ;;
  *)
    # For backward compatibility, if the first arg isn't build/version,
    # assume it's a build command
    if [[ -x "$SCRIPT_DIR/rin-build" ]]; then
      exec "$SCRIPT_DIR/rin-build" "$CATEGORY" "$@"
    else
      error "bin/rin-build not found or not executable"
    fi
    ;;
esac