#!/usr/bin/env bash

#
# rin-build - Streamlined Rinna build system
#
# PURPOSE: Unified command-line utility for building, cleaning, and running tests
# following clean code principles for maintainability and reduced duplication.
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Constants
RINNA_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONFIG_FILE="${RINNA_DIR}/version.properties"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Defaults
VERBOSITY="terse"
TEST_CATEGORY="all"
FEATURES=""
COVERAGE=false
PARALLEL=false
FAIL_FAST=false
WATCH=false

# UI Functions
print_header() { echo -e "${BLUE}$1${NC}"; }
print_success() { echo -e "${GREEN}$1${NC}"; }
print_warning() { echo -e "${YELLOW}$1${NC}"; }
print_error() { echo -e "${RED}$1${NC}"; }
print_error_exit() { echo -e "${RED}$1${NC}"; exit 1; }

# Show help text
show_help() {
  cat << EOF
${BLUE}rin-build${NC} - Streamlined Rinna build system

Usage: rin-build [command] [options]

Commands:
  clean                   Clean build artifacts
  compile                 Compile the source code
  test                    Run tests (default: all tests)
  package                 Package the application
  all                     Clean, compile, test
  
Test Categories:
  unit                    Run unit tests only
  bdd                     Run all BDD tests
  workflow                Run workflow BDD tests
  release                 Run release BDD tests
  input                   Run input interface BDD tests
  api                     Run API integration BDD tests
  cli                     Run CLI integration BDD tests
  tag:<name>              Run tests with specific tag

Options:
  --verbose               Show detailed output
  --terse                 Show minimal output (default)
  --errors                Show only errors
  --parallel              Run tests in parallel
  --fail-fast             Stop at first failure
  --coverage              Generate coverage report
  --watch                 Monitor and run tests on changes
  --help                  Show this help message

Examples:
  rin-build compile test unit  # Compile and run unit tests
  rin-build all --verbose      # Clean, compile, test with verbose output
  rin-build test workflow      # Run workflow tests
  rin-build test --coverage    # Run tests with coverage report
EOF
}

# Run a command with appropriate output based on verbosity
run_cmd() {
  local cmd="$1"
  local description="$2"
  local start_time=$(date +%s)
  
  print_header "[$description]"
  
  case $VERBOSITY in
    verbose)
      # Show all output
      eval "$cmd"
      local exit_code=$?
      ;;
    errors)
      # Capture output and only show on error
      local output=$(eval "$cmd" 2>&1)
      local exit_code=$?
      if [[ $exit_code -ne 0 ]]; then
        print_error "Error in $description:"
        echo "$output"
      fi
      ;;
    terse|*)
      # Minimal output, show errors and summaries
      local temp_output=$(mktemp)
      eval "$cmd" > "$temp_output" 2>&1
      local exit_code=$?
      
      if [[ $exit_code -ne 0 ]]; then
        print_error "Error in $description:"
        cat "$temp_output"
      elif [[ $cmd == *"test"* ]]; then
        # For test commands, show a summary even on success
        grep -E "Tests run:|Running |FAILURE|ERROR" "$temp_output" || true
      fi
      
      rm -f "$temp_output"
      ;;
  esac
  
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  
  if [[ $exit_code -eq 0 ]]; then
    print_success "✓ $description completed in ${duration}s"
  else
    print_error "✗ $description failed in ${duration}s"
    # In test mode, we want to show the summary even if tests fail
    if [[ $cmd == *"test"* ]]; then
      print_test_summary
    fi
    exit $exit_code
  fi
}

# Get version from version.properties
get_version() {
  grep -m 1 "^version=" "$CONFIG_FILE" | cut -d'=' -f2
}

# Configure Maven command with appropriate options
configure_maven_cmd() {
  local base_cmd="mvn"
  local opts=""
  
  # Add verbosity
  case $VERBOSITY in
    verbose) opts="$opts" ;;
    errors) opts="$opts -q" ;;
    terse) opts="$opts -q" ;;
  esac
  
  # Add test category if specified
  if [[ -n "$TEST_CATEGORY" && "$TEST_CATEGORY" != "all" ]]; then
    if [[ "$TEST_CATEGORY" == "unit" ]]; then
      opts="$opts -Dtest='*Test,!*Runner'"
    elif [[ "$TEST_CATEGORY" == "bdd" ]]; then
      opts="$opts -Dtest='org.rinna.bdd.CucumberRunner'"
    elif [[ "$TEST_CATEGORY" == "workflow" ]]; then
      opts="$opts -Dtest='org.rinna.bdd.CucumberRunner' -Dcucumber.filter.tags='@workflow'"
    elif [[ "$TEST_CATEGORY" == "release" ]]; then
      opts="$opts -Dtest='org.rinna.bdd.ReleaseRunner'"
    elif [[ "$TEST_CATEGORY" == "input" ]]; then
      opts="$opts -Dtest='org.rinna.bdd.InputInterfaceRunner'"
    elif [[ "$TEST_CATEGORY" == "api" ]]; then
      opts="$opts -Dtest='org.rinna.bdd.APIIntegrationRunner'"
    elif [[ "$TEST_CATEGORY" == "cli" ]]; then
      opts="$opts -Dtest='org.rinna.bdd.CLIIntegrationRunner'"
    elif [[ "$TEST_CATEGORY" =~ ^tag:(.+)$ ]]; then
      local tag=${BASH_REMATCH[1]}
      opts="$opts -Dtest='org.rinna.bdd.TaggedTestsRunner' -Dcucumber.filter.tags='@$tag'"
    fi
  fi
  
  # Add parallel execution
  if $PARALLEL; then
    opts="$opts -Dcucumber.execution.parallel.enabled=true"
  else
    opts="$opts -Dcucumber.execution.parallel.enabled=false"
  fi
  
  # Add fail-fast
  if $FAIL_FAST; then
    opts="$opts -Dsurefire.skipAfterFailureCount=1"
  fi
  
  # Add coverage
  if $COVERAGE; then
    opts="$opts -Pjacoco"
  fi
  
  echo "$base_cmd $opts"
}

# Print test summary
print_test_summary() {
  if [[ -d target/surefire-reports || -d rinna-core/target/surefire-reports ]]; then
    print_header "[Test Summary]"
    local failed_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; | wc -l)
    
    # Show failed tests if any
    if [[ $failed_tests -gt 0 ]]; then
      find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; | while read file; do
        local test_name=$(basename "$file" | sed 's/TEST-//' | sed 's/\.xml//')
        print_error "FAILED: $test_name"
      done
    fi
    
    # Show test counts
    local total_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f | wc -l)
    local passed_tests=$((total_tests - failed_tests))
    
    echo -e "${GREEN}Tests passed: $passed_tests${NC}, ${RED}Tests failed: $failed_tests${NC}, Total: $total_tests"
    
    # Show coverage if available
    if $COVERAGE && [[ -f "target/site/jacoco/index.html" || -f "rinna-core/target/site/jacoco/index.html" ]]; then
      local coverage_file=$(find . -path "*/site/jacoco/index.html" | head -n 1)
      if [[ -n "$coverage_file" ]]; then
        local line_cov=$(grep -A 1 "Lines" "$coverage_file" | grep -o '[0-9.]*%' | head -1)
        local branch_cov=$(grep -A 1 "Branches" "$coverage_file" | grep -o '[0-9.]*%' | head -1)
        
        print_header "[Coverage Report]"
        echo "Line coverage: $line_cov"
        echo "Branch coverage: $branch_cov"
        echo "Report available at: $(realpath $coverage_file)"
      fi
    fi
  fi
}

# Command: clean
cmd_clean() {
  local mvn_cmd=$(configure_maven_cmd)
  run_cmd "$mvn_cmd clean" "Cleaning project"
}

# Command: compile
cmd_compile() {
  local mvn_cmd=$(configure_maven_cmd)
  run_cmd "$mvn_cmd compile" "Compiling source code"
}

# Command: test
cmd_test() {
  local mvn_cmd=$(configure_maven_cmd)
  if [[ "$TEST_CATEGORY" == "all" ]]; then
    run_cmd "$mvn_cmd test" "Running all tests"
  else
    run_cmd "$mvn_cmd test" "Running $TEST_CATEGORY tests"
  fi
  print_test_summary
}

# Command: package
cmd_package() {
  local mvn_cmd=$(configure_maven_cmd)
  local version=$(get_version)
  run_cmd "$mvn_cmd package" "Packaging application (v$version)"
}

# Command: all
cmd_all() {
  cmd_clean
  cmd_compile
  cmd_test
}

# Continuous testing mode
start_watch_mode() {
  print_header "Starting watch mode for continuous testing"
  cmd_test
  
  print_header "Watching for changes (press Ctrl+C to stop)..."
  local dirs_to_watch="src/main src/test rinna-core/src/main rinna-core/src/test"
  
  while true; do
    local changes=$(inotifywait -r -e modify,create,delete $dirs_to_watch 2>/dev/null || echo "CHANGE")
    
    if [[ -n "$changes" ]]; then
      print_header "Changes detected, running tests..."
      cmd_test
    fi
    
    sleep 1
  done
}

# Parse command line arguments
COMMANDS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    clean|compile|test|package|all)
      COMMANDS+=("$1")
      shift
      ;;
    unit|bdd|workflow|release|input|api|cli|tag:*)
      TEST_CATEGORY="$1"
      shift
      ;;
    --verbose)
      VERBOSITY="verbose"
      shift
      ;;
    --terse)
      VERBOSITY="terse"
      shift
      ;;
    --errors)
      VERBOSITY="errors"
      shift
      ;;
    --parallel)
      PARALLEL=true
      shift
      ;;
    --fail-fast)
      FAIL_FAST=true
      shift
      ;;
    --coverage)
      COVERAGE=true
      shift
      ;;
    --watch)
      WATCH=true
      shift
      ;;
    --help|-h)
      show_help
      exit 0
      ;;
    *)
      print_error_exit "Unknown option: $1"
      ;;
  esac
done

# Set default command if none specified
if [[ ${#COMMANDS[@]} -eq 0 ]]; then
  COMMANDS=("all")
fi

# Change to project directory
cd "$RINNA_DIR"

# Check watch mode
if $WATCH; then
  start_watch_mode
  exit 0
fi

# Execute commands
for cmd in "${COMMANDS[@]}"; do
  case $cmd in
    clean) cmd_clean ;;
    compile) cmd_compile ;;
    test) cmd_test ;;
    package) cmd_package ;;
    all) cmd_all ;;
  esac
done

print_success "All operations completed successfully!"