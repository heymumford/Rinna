#!/usr/bin/env bash
#
# rin-build - Unified build management for Rinna
#
# PURPOSE: Provide a single interface for building all Rinna components
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -eo pipefail

# Determine script and project directories
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
RINNA_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
COMMON_DIR="$SCRIPT_DIR/common"
UTILS_FILE="$COMMON_DIR/rinna_utils.sh"

# ANSI color codes if utils not available
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Source common utilities if available
if [ -f "$UTILS_FILE" ]; then
  source "$UTILS_FILE"
else
  echo -e "${YELLOW}Warning: Common utilities not found at $UTILS_FILE${NC}"
  echo -e "Some advanced features may not be available"
  
  # Define minimal utility functions if not available
  print_header() { echo -e "${BLUE}$1${NC}"; }
  print_success() { echo -e "${GREEN}✓ $1${NC}"; }
  print_warning() { echo -e "${YELLOW}! $1${NC}"; }
  print_error() { echo -e "${RED}✗ $1${NC}" >&2; }
  print_debug() { [[ "$VERBOSE" == "true" ]] && echo -e "DEBUG: $1"; }
fi

# Defaults
CLEAN=false
VERIFY=false
SKIP_TESTS=false
SKIP_QUALITY=false
VERBOSE=false
PARALLEL=true
MAVEN_PROFILES=""

# Build flags
export MAVEN_OPTS="${MAVEN_OPTS:---enable-preview}"
export GO111MODULE=on

# Initialize logs directory
LOG_DIR="$RINNA_DIR/logs"
mkdir -p "$LOG_DIR"
BUILD_LOG="$LOG_DIR/build-$(date +%Y%m%d-%H%M%S).log"

# Display help message
show_help() {
  cat << EOT
${BLUE}rin-build${NC} - Unified build management for Rinna

This tool provides a centralized build interface for all Rinna components
(Java, Go, Python) with consistent behavior and error handling.

Usage: rin-build [options] [module...]

Options:
  -c, --clean           Clean before building
  -v, --verify          Run verification (tests and quality checks)
  -s, --skip-tests      Skip tests during build
  -q, --skip-quality    Skip quality checks during build
  -p, --parallel        Build modules in parallel (default: $PARALLEL)
  -x, --verbose         Enable verbose output
  -h, --help            Show this help message

Modules:
  If no specific modules are provided, all components will be built.
  Available modules: all, java, core, cli, api, go, python

Examples:
  rin-build                   # Build all components
  rin-build -c                # Clean and build all components
  rin-build -c -v             # Clean, build, and verify all components
  rin-build -s                # Build without running tests
  rin-build java              # Build only Java components
  rin-build core cli          # Build only core and CLI components
  rin-build -v api            # Build and verify API components
  rin-build --parallel=false  # Build sequentially
EOT
}

# Build Java component
build_java() {
  local module="$1"
  print_header "Building Java module: $module"
  
  local pom_file=""
  case "$module" in
    core|rinna-core)
      pom_file="$RINNA_DIR/rinna-core/pom.xml"
      module_name="core"
      ;;
    cli|rinna-cli)
      pom_file="$RINNA_DIR/rinna-cli/pom.xml"
      module_name="cli"
      ;;
    java|all)
      pom_file="$RINNA_DIR/pom.xml"
      module_name="all"
      ;;
    *)
      print_error "Unknown Java module: $module"
      return 1
      ;;
  esac
  
  if [[ ! -f "$pom_file" ]]; then
    print_error "POM file not found: $pom_file"
    return 1
  fi
  
  # Setup Maven arguments
  local mvn_args=""
  
  # Clean if requested
  if [[ "$CLEAN" == "true" ]]; then
    mvn_args="clean $mvn_args"
  fi
  
  # Set goal based on verify flag
  if [[ "$VERIFY" == "true" ]]; then
    mvn_args="$mvn_args verify"
  else 
    mvn_args="$mvn_args package"
  fi
  
  # Handle testing flags
  if [[ "$SKIP_TESTS" == "true" ]]; then
    mvn_args="$mvn_args -DskipTests"
  fi
  
  # Handle quality flags
  if [[ "$SKIP_QUALITY" == "true" ]]; then
    mvn_args="$mvn_args -P skip-quality"
  elif [[ -n "$MAVEN_PROFILES" ]]; then
    mvn_args="$mvn_args -P $MAVEN_PROFILES"
  fi
  
  # Handle output flags
  if [[ "$VERBOSE" == "true" ]]; then
    mvn_args="$mvn_args -X"
  fi
  
  # Build the Java module
  local start_time=$(date +%s)
  
  # Execute the build
  if [[ "$module_name" == "all" ]]; then
    echo "Building all Java modules with: mvn $mvn_args" | tee -a "$BUILD_LOG"
    (cd "$RINNA_DIR" && mvn $mvn_args) | tee -a "$BUILD_LOG"
  else
    echo "Building $module module with: mvn $mvn_args -f $(basename "$pom_file")" | tee -a "$BUILD_LOG"
    (cd "$(dirname "$pom_file")" && mvn $mvn_args -f "$(basename "$pom_file")") | tee -a "$BUILD_LOG"
  fi
  
  local result=$?
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  
  if [[ $result -eq 0 ]]; then
    print_success "Java $module build completed successfully in ${duration}s"
    return 0
  else
    print_error "Java $module build failed after ${duration}s"
    return 1
  fi
}

# Build Go component
build_go() {
  local module="$1"
  print_header "Building Go module: $module"
  
  local go_dir=""
  case "$module" in
    api)
      go_dir="$RINNA_DIR/api"
      module_name="api"
      ;;
    version|version-service)
      go_dir="$RINNA_DIR/version-service"
      module_name="version-service"
      ;;
    all)
      # Build all Go modules
      build_go api
      build_go version-service
      return $?
      ;;
    *)
      print_error "Unknown Go module: $module"
      return 1
      ;;
  esac
  
  if [[ ! -d "$go_dir" ]]; then
    print_error "Go directory not found: $go_dir"
    return 1
  fi
  
  # Handle clean if requested
  if [[ "$CLEAN" == "true" ]]; then
    rm -rf "$go_dir/bin" || true
  fi
  
  # Setup go build arguments
  local go_args=""
  if [[ "$VERBOSE" == "true" ]]; then
    go_args="$go_args -v"
  fi
  
  # Ensure bin directory exists
  mkdir -p "$go_dir/bin"
  
  # Build the Go module
  local start_time=$(date +%s)
  
  # Execute the build
  if [[ "$module_name" == "api" ]]; then
    echo "Building Go API server and health checker" | tee -a "$BUILD_LOG"
    (cd "$go_dir" && go build $go_args -o bin/rinnasrv cmd/rinnasrv/main.go && 
     go build $go_args -o bin/healthcheck cmd/healthcheck/main.go) | tee -a "$BUILD_LOG"
    local result=$?
  elif [[ "$module_name" == "version-service" ]]; then
    echo "Building version service CLI tool" | tee -a "$BUILD_LOG"
    (cd "$go_dir" && go build $go_args -o bin/version-cli cli/version_cli.go) | tee -a "$BUILD_LOG"
    local result=$?
  fi
  
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  
  if [[ $result -eq 0 ]]; then
    print_success "Go $module build completed successfully in ${duration}s"
    return 0
  else
    print_error "Go $module build failed after ${duration}s"
    return 1
  fi
}

# Build Python component
build_python() {
  local module="$1"
  print_header "Building Python modules"
  
  local py_dir="$RINNA_DIR/python"
  
  if [[ ! -d "$py_dir" ]]; then
    print_error "Python directory not found: $py_dir"
    return 1
  fi
  
  # Handle clean if requested
  if [[ "$CLEAN" == "true" ]]; then
    rm -rf "$py_dir/build" "$py_dir/dist" "$py_dir/*.egg-info" || true
  fi
  
  # Build the Python module
  local start_time=$(date +%s)
  
  # Ensure build directory exists
  mkdir -p "$py_dir/build"
  
  # Install dependencies
  echo "Installing Python dependencies" | tee -a "$BUILD_LOG"
  if [[ -f "$RINNA_DIR/requirements.txt" ]]; then
    (cd "$RINNA_DIR" && pip3 install -r requirements.txt) | tee -a "$BUILD_LOG"
    local result1=$?
  else
    print_warning "requirements.txt not found, skipping dependency installation"
    local result1=0
  fi
  
  # Build Python package
  if [[ -f "$py_dir/setup.py" ]]; then
    echo "Building Python package" | tee -a "$BUILD_LOG"
    (cd "$py_dir" && python3 setup.py build) | tee -a "$BUILD_LOG"
    local result2=$?
  else
    print_warning "setup.py not found, skipping Python package build"
    local result2=0
  fi
  
  # Combined result
  local result=0
  [[ $result1 -ne 0 || $result2 -ne 0 ]] && result=1
  
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  
  if [[ $result -eq 0 ]]; then
    print_success "Python build completed successfully in ${duration}s"
    return 0
  else
    print_error "Python build failed after ${duration}s"
    return 1
  fi
}

# Parse command line arguments
parse_args() {
  local modules=""
  
  while [[ $# -gt 0 ]]; do
    case $1 in
      -c|--clean)
        CLEAN=true
        shift
        ;;
      -v|--verify)
        VERIFY=true
        shift
        ;;
      -s|--skip-tests)
        SKIP_TESTS=true
        shift
        ;;
      -q|--skip-quality)
        SKIP_QUALITY=true
        shift
        ;;
      -p|--parallel)
        PARALLEL=true
        shift
        ;;
      --parallel=*)
        PARALLEL="${1#*=}"
        shift
        ;;
      -x|--verbose)
        VERBOSE=true
        shift
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      -*)
        print_error "Unknown option: $1"
        show_help
        exit 1
        ;;
      *)
        # Module to build
        modules="$modules $1"
        shift
        ;;
    esac
  done
  
  # Default to all modules if none specified
  echo "${modules:-all}"
}

# Main build function
main() {
  # Parse command line arguments
  local modules=$(parse_args "$@")
  
  # Print build configuration
  print_header "Rinna Build System"
  echo "Build configuration:"
  echo "  Modules:       ${modules:-all}"
  echo "  Clean:         $CLEAN"
  echo "  Verify:        $VERIFY"
  echo "  Skip Tests:    $SKIP_TESTS"
  echo "  Skip Quality:  $SKIP_QUALITY"
  echo "  Parallel:      $PARALLEL"
  echo "  Verbose:       $VERBOSE"
  echo "  Build Log:     $BUILD_LOG"
  
  # Process modules
  print_header "Starting build process"
  local start_time=$(date +%s)
  
  # Track build results
  local build_results=()
  local build_modules=()
  
  # Build modules in the specified order
  for module in $modules; do
    case "$module" in
      all)
        # Build all modules
        if [[ "$PARALLEL" == "true" || "$PARALLEL" == "yes" || "$PARALLEL" == "y" || "$PARALLEL" == "1" ]]; then
          echo "Building all modules in parallel..."
          
          # Use a background process group to build in parallel
          build_java all &
          build_go all &
          build_python all &
          
          # Wait for all background processes to complete
          wait
          
          # Since we can't easily get the return values from background processes,
          # we'll check if the output directories exist
          local all_success=true
          if [[ ! -d "$RINNA_DIR/target" && ! -d "$RINNA_DIR/rinna-core/target" ]]; then
            print_error "Java build failed"
            all_success=false
          fi
          
          if [[ ! -d "$RINNA_DIR/api/bin" ]]; then
            print_error "Go API build failed"
            all_success=false
          fi
          
          if [[ ! -d "$RINNA_DIR/python/build" && -f "$RINNA_DIR/python/setup.py" ]]; then
            print_error "Python build failed"
            all_success=false
          fi
          
          if [[ "$all_success" == "true" ]]; then
            print_success "All modules built successfully"
          else
            print_error "Some modules failed to build"
            exit 1
          fi
        else
          echo "Building all modules sequentially..."
          
          # Build Java module
          build_java all
          local result1=$?
          build_results+=($result1)
          build_modules+=("java")
          
          # Build Go API module
          build_go all
          local result2=$?
          build_results+=($result2)
          build_modules+=("go")
          
          # Build Python modules
          build_python all
          local result3=$?
          build_results+=($result3)
          build_modules+=("python")
        fi
        ;;
      
      java)
        build_java all
        local result=$?
        build_results+=($result)
        build_modules+=("java")
        ;;
        
      core|rinna-core)
        build_java core
        local result=$?
        build_results+=($result)
        build_modules+=("core")
        ;;
        
      cli|rinna-cli)
        build_java cli
        local result=$?
        build_results+=($result)
        build_modules+=("cli")
        ;;
        
      api)
        build_go api
        local result=$?
        build_results+=($result)
        build_modules+=("api")
        ;;
        
      version|version-service)
        build_go version-service
        local result=$?
        build_results+=($result)
        build_modules+=("version-service")
        ;;
        
      python)
        build_python all
        local result=$?
        build_results+=($result)
        build_modules+=("python")
        ;;
        
      *)
        print_error "Unknown module: $module"
        exit 1
        ;;
    esac
  done
  
  # Print build summary
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  
  print_header "Build Summary"
  echo "Total build time: ${duration}s"
  
  # Print results for each module
  local failures=0
  for i in "${!build_modules[@]}"; do
    local module="${build_modules[$i]}"
    local result="${build_results[$i]}"
    
    if [[ $result -eq 0 ]]; then
      print_success "Module ${module}: SUCCESS"
    else
      print_error "Module ${module}: FAILED"
      ((failures++))
    fi
  done
  
  # Final status
  if [[ $failures -eq 0 ]]; then
    print_success "All builds completed successfully"
    print_success "Build log: $BUILD_LOG"
    return 0
  else
    print_error "$failures module(s) failed to build"
    print_error "Check build log for details: $BUILD_LOG"
    return 1
  fi
}

# Execute main function with all arguments
main "$@"