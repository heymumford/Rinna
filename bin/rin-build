#!/usr/bin/env bash

#
# rin-build - Streamlined Rinna build system
#
# PURPOSE: Unified command-line utility for building, cleaning, and running tests
# following clean code principles for maintainability and reduced duplication.
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Constants
RINNA_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONFIG_FILE="${RINNA_DIR}/version.properties"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Defaults
VERBOSITY="terse"
TEST_CATEGORY="all"
FEATURES=""
COVERAGE=false
PARALLEL=false
FAIL_FAST=false
WATCH=false
SKIP_TESTS=false

# Build modes
declare -A BUILD_MODES
BUILD_MODES[fast]="skip_tests=true"
BUILD_MODES[test]="skip_tests=false"
BUILD_MODES[package]="skip_tests=true package=true"
BUILD_MODES[verify]="skip_tests=false coverage=true fail_fast=true"
BUILD_MODES[release]="skip_tests=false package=true coverage=true"

# Test category mapping
declare -A TEST_CATEGORIES
TEST_CATEGORIES[unit]="-P unit-tests"
TEST_CATEGORIES[component]="-P component-tests"
TEST_CATEGORIES[integration]="-P integration-tests"
TEST_CATEGORIES[acceptance]="-P acceptance-tests"
TEST_CATEGORIES[bdd]="-P acceptance-tests"
TEST_CATEGORIES[performance]="-P performance-tests"
TEST_CATEGORIES[all]=""

# Test domain mapping (legacy, for BDD tests)
declare -A TEST_DOMAINS
TEST_DOMAINS[workflow]="cucumber.filter.tags=@workflow"
TEST_DOMAINS[release]="test=org.rinna.bdd.ReleaseRunner"
TEST_DOMAINS[input]="test=org.rinna.bdd.InputInterfaceRunner"
TEST_DOMAINS[api]="test=org.rinna.bdd.APIIntegrationRunner"
TEST_DOMAINS[cli]="test=org.rinna.bdd.CLIIntegrationRunner"

# UI Functions
print_header() { echo -e "${BLUE}$1${NC}"; }
print_success() { echo -e "${GREEN}$1${NC}"; }
print_warning() { echo -e "${YELLOW}$1${NC}"; }
print_error() { echo -e "${RED}$1${NC}"; }
print_error_exit() { echo -e "${RED}$1${NC}"; exit 1; }

# Show help text
show_help() {
  cat << EOF
${BLUE}rin-build${NC} - Streamlined Rinna build system

Usage: rin-build [mode|command] [options]

Build Modes:
  fast                    Quick build without tests
  test                    Build and run tests
  package                 Build and create package
  verify                  Build with full verification
  release                 Prepare for release

Commands:
  clean                   Clean build artifacts
  compile                 Compile the source code
  test                    Run tests (default: all tests)
  package                 Package the application
  all                     Clean, compile, test
  prepare-release         Run tests, bump version, package
  
Test Categories:
  unit                    Run fast unit tests only
  component               Run component tests
  integration             Run integration tests
  acceptance              Run acceptance tests (same as bdd)
  bdd                     Run BDD/acceptance tests (legacy alias)
  performance             Run performance benchmarks
  all                     Run all tests (default)
  
BDD Domains (legacy):
  domain:workflow         Run workflow domain tests
  domain:release          Run release domain tests
  domain:input            Run input interface domain tests
  domain:api              Run API integration domain tests
  domain:cli              Run CLI integration domain tests
  tag:<name>              Run tests with specific tag

Options:
  --verbose               Show detailed output
  --terse                 Show minimal output (default)
  --errors                Show only errors
  --parallel              Run tests in parallel
  --fail-fast             Stop at first failure
  --coverage              Generate coverage report
  --watch                 Monitor and run tests on changes
  --help                  Show this help message

Examples:
  rin-build fast          # Quick build without tests
  rin-build test          # Build and run tests
  rin-build verify        # Full verification with coverage
  rin-build domain:workflow # Run workflow domain tests
  rin-build prepare-release # Prepare for a release
EOF
}

# Run a command with appropriate output based on verbosity
run_cmd() {
  local cmd="$1"
  local description="$2"
  local start_time=$(date +%s)
  
  print_header "[$description]"
  
  case $VERBOSITY in
    verbose)
      # Show all output
      eval "$cmd"
      local exit_code=$?
      ;;
    errors)
      # Capture output and only show on error
      local output=$(eval "$cmd" 2>&1)
      local exit_code=$?
      if [[ $exit_code -ne 0 ]]; then
        print_error "Error in $description:"
        echo "$output"
      fi
      ;;
    terse|*)
      # Minimal output, show errors and summaries
      local temp_output=$(mktemp)
      eval "$cmd" > "$temp_output" 2>&1
      local exit_code=$?
      
      if [[ $exit_code -ne 0 ]]; then
        print_error "Error in $description:"
        cat "$temp_output"
      elif [[ $cmd == *"test"* ]]; then
        # For test commands, show a summary even on success
        grep -E "Tests run:|Running |FAILURE|ERROR" "$temp_output" || true
      fi
      
      rm -f "$temp_output"
      ;;
  esac
  
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  
  if [[ $exit_code -eq 0 ]]; then
    print_success "✓ $description completed in ${duration}s"
  else
    print_error "✗ $description failed in ${duration}s"
    # In test mode, we want to show the summary even if tests fail
    if [[ $cmd == *"test"* ]]; then
      print_test_summary
    fi
    exit $exit_code
  fi
}

# Get version from version.properties
get_version() {
  grep -m 1 "^version=" "$CONFIG_FILE" | cut -d'=' -f2
}

# Configure Maven command with appropriate options
configure_maven_cmd() {
  local base_cmd="mvn"
  local opts="$MAVEN_OPTS"
  
  # Add verbosity
  case $VERBOSITY in
    verbose) ;;
    errors) opts="$opts -q" ;;
    terse) opts="$opts -q" ;;
  esac
  
  # Add test category if specified
  if [[ -n "$TEST_CATEGORY" && "$TEST_CATEGORY" != "all" && "$TEST_CATEGORY" != "custom" ]]; then
    # First check if it's one of our new test categories
    if [[ -n "${TEST_CATEGORIES[$TEST_CATEGORY]}" ]]; then
      opts="$opts ${TEST_CATEGORIES[$TEST_CATEGORY]}"
    # Otherwise check the legacy categories
    elif [[ "$TEST_CATEGORY" == "unit" ]]; then
      opts="$opts -P unit-tests"
    elif [[ "$TEST_CATEGORY" == "bdd" ]]; then
      opts="$opts -P acceptance-tests -Dtest='org.rinna.bdd.CucumberRunner'"
    elif [[ "$TEST_CATEGORY" == "tag" && -n "$TAG_NAME" ]]; then
      opts="$opts -Dtest='org.rinna.bdd.TaggedTestsRunner' -Dcucumber.filter.tags='@$TAG_NAME'"
    fi
  fi
  
  # Add parallel execution
  if $PARALLEL; then
    opts="$opts -Dcucumber.execution.parallel.enabled=true"
  else
    opts="$opts -Dcucumber.execution.parallel.enabled=false"
  fi
  
  # Add fail-fast
  if $FAIL_FAST; then
    opts="$opts -Dsurefire.skipAfterFailureCount=1"
  fi
  
  # Add coverage
  if $COVERAGE; then
    opts="$opts -Pjacoco"
  fi
  
  echo "$base_cmd $opts"
}

# Print test summary
print_test_summary() {
  if [[ -d target/surefire-reports || -d rinna-core/target/surefire-reports ]]; then
    print_header "[Test Summary]"
    local failed_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; | wc -l)
    
    # Show failed tests if any
    if [[ $failed_tests -gt 0 ]]; then
      find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; | while read file; do
        local test_name=$(basename "$file" | sed 's/TEST-//' | sed 's/\.xml//')
        print_error "FAILED: $test_name"
      done
    fi
    
    # Show test counts
    local total_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f | wc -l)
    local passed_tests=$((total_tests - failed_tests))
    
    echo -e "${GREEN}Tests passed: $passed_tests${NC}, ${RED}Tests failed: $failed_tests${NC}, Total: $total_tests"
    
    # Show coverage if available
    if $COVERAGE && [[ -f "target/site/jacoco/index.html" || -f "rinna-core/target/site/jacoco/index.html" ]]; then
      local coverage_file=$(find . -path "*/site/jacoco/index.html" | head -n 1)
      if [[ -n "$coverage_file" ]]; then
        local line_cov=$(grep -A 1 "Lines" "$coverage_file" | grep -o '[0-9.]*%' | head -1)
        local branch_cov=$(grep -A 1 "Branches" "$coverage_file" | grep -o '[0-9.]*%' | head -1)
        
        print_header "[Coverage Report]"
        echo "Line coverage: $line_cov"
        echo "Branch coverage: $branch_cov"
        echo "Report available at: $(realpath $coverage_file)"
      fi
    fi
  fi
}

# Command: clean
cmd_clean() {
  local mvn_cmd=$(configure_maven_cmd)
  run_cmd "$mvn_cmd clean" "Cleaning project"
}

# Command: compile
cmd_compile() {
  local mvn_cmd=$(configure_maven_cmd)
  run_cmd "$mvn_cmd compile" "Compiling source code"
}

# Command: test
cmd_test() {
  local mvn_cmd=$(configure_maven_cmd)
  if [[ "$TEST_CATEGORY" == "all" ]]; then
    run_cmd "$mvn_cmd test" "Running all tests"
  else
    run_cmd "$mvn_cmd test" "Running $TEST_CATEGORY tests"
  fi
  print_test_summary
}

# Command: package
cmd_package() {
  local mvn_cmd=$(configure_maven_cmd)
  local version=$(get_version)
  run_cmd "$mvn_cmd package" "Packaging application (v$version)"
}

# Command: all
cmd_all() {
  cmd_clean
  cmd_compile
  cmd_test
}

# Command: prepare-release
cmd_prepare_release() {
  local current_version=$(get_version)
  print_header "Preparing release for version $current_version"
  
  # Verify version consistency first
  if [[ -x "$RINNA_DIR/bin/rin-version" ]]; then
    run_cmd "$RINNA_DIR/bin/rin-version verify" "Verifying version consistency"
  else
    print_warning "bin/rin-version not found, skipping version verification"
  fi
  
  # Run tests with coverage
  COVERAGE=true
  cmd_test
  
  # Package the application
  cmd_package
  
  # Update version for release
  if [[ -x "$RINNA_DIR/bin/rin-version" ]]; then
    run_cmd "$RINNA_DIR/bin/rin-version release" "Updating version for release"
  else
    print_warning "bin/rin-version not found, skipping version update"
  fi
  
  print_success "Release preparation complete for version $current_version"
}

# Continuous testing mode
start_watch_mode() {
  print_header "Starting watch mode for continuous testing"
  cmd_test
  
  print_header "Watching for changes (press Ctrl+C to stop)..."
  local dirs_to_watch="src/main src/test rinna-core/src/main rinna-core/src/test"
  
  while true; do
    local changes=$(inotifywait -r -e modify,create,delete $dirs_to_watch 2>/dev/null || echo "CHANGE")
    
    if [[ -n "$changes" ]]; then
      print_header "Changes detected, running tests..."
      cmd_test
    fi
    
    sleep 1
  done
}

# Parse command line arguments
COMMANDS=()
PACKAGE=false
DO_RELEASE=false

process_mode() {
  local mode="$1"
  
  if [[ -z "${BUILD_MODES[$mode]}" ]]; then
    print_error_exit "Unknown build mode: $mode"
  fi
  
  # Process mode settings
  local settings="${BUILD_MODES[$mode]}"
  for setting in $settings; do
    local key="${setting%%=*}"
    local value="${setting#*=}"
    
    case $key in
      skip_tests) SKIP_TESTS=$value ;;
      package) PACKAGE=$value ;;
      coverage) COVERAGE=$value ;;
      fail_fast) FAIL_FAST=$value ;;
    esac
  done
  
  # Add appropriate commands based on mode
  COMMANDS+=("clean" "compile")
  
  if [[ "$SKIP_TESTS" != "true" ]]; then
    COMMANDS+=("test")
  fi
  
  if [[ "$PACKAGE" == "true" ]]; then
    COMMANDS+=("package")
  fi
}

process_domain() {
  local domain="${1#domain:}"
  
  if [[ -n "${TEST_DOMAINS[$domain]}" ]]; then
    local setting="${TEST_DOMAINS[$domain]}"
    local key="${setting%%=*}"
    local value="${setting#*=}"
    
    case $key in
      cucumber.filter.tags) 
        TEST_CATEGORY="bdd"
        MAVEN_OPTS="$MAVEN_OPTS -D$key=$value"
        ;;
      test)
        TEST_CATEGORY="custom"
        MAVEN_OPTS="$MAVEN_OPTS -D$key=$value"
        ;;
    esac
  else
    print_error_exit "Unknown domain: $domain"
  fi
}

while [[ $# -gt 0 ]]; do
  case $1 in
    # Build modes
    fast|test|package|verify|release)
      process_mode "$1"
      shift
      ;;
    # Standard commands
    clean|compile|test|package|all)
      COMMANDS+=("$1")
      shift
      ;;
    # Special combined command
    prepare-release)
      COMMANDS+=("clean" "compile" "test" "package")
      DO_RELEASE=true
      shift
      ;;
    # Test categories
    unit|component|integration|acceptance|bdd|performance)
      TEST_CATEGORY="$1"
      shift
      ;;
    # Domain-specific test categories
    domain:*)
      process_domain "$1"
      shift
      ;;
    # Legacy test categories - map to domains
    workflow|release|input|api|cli)
      process_domain "domain:$1"
      shift
      ;;
    # Tag-based tests
    tag:*)
      TEST_CATEGORY="tag"
      TAG_NAME="${1#tag:}"
      shift
      ;;
    # Options
    --verbose)
      VERBOSITY="verbose"
      shift
      ;;
    --terse)
      VERBOSITY="terse"
      shift
      ;;
    --errors)
      VERBOSITY="errors"
      shift
      ;;
    --parallel)
      PARALLEL=true
      shift
      ;;
    --fail-fast)
      FAIL_FAST=true
      shift
      ;;
    --coverage)
      COVERAGE=true
      shift
      ;;
    --watch)
      WATCH=true
      shift
      ;;
    --skip-tests)
      SKIP_TESTS=true
      shift
      ;;
    --help|-h)
      show_help
      exit 0
      ;;
    *)
      print_error_exit "Unknown option: $1"
      ;;
  esac
done

# Set default command if none specified
if [[ ${#COMMANDS[@]} -eq 0 ]]; then
  COMMANDS=("all")
fi

# Maven options
MAVEN_OPTS=""

# Change to project directory
cd "$RINNA_DIR"

# Check watch mode
if $WATCH; then
  start_watch_mode
  exit 0
fi

# Execute commands
for cmd in "${COMMANDS[@]}"; do
  case $cmd in
    clean) cmd_clean ;;
    compile) cmd_compile ;;
    test) 
      if [[ "$SKIP_TESTS" != "true" ]]; then
        cmd_test
      else
        print_warning "Skipping tests as requested"
      fi
      ;;
    package) cmd_package ;;
    all) cmd_all ;;
  esac
done

# Handle special integrated commands
if [[ "$DO_RELEASE" == "true" ]]; then
  cmd_prepare_release
fi

print_success "All operations completed successfully!"