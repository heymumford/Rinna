#!/usr/bin/env bash

#
# rin-config - Unified configuration management for Rinna
#
# PURPOSE: Manage, validate, and generate configuration for all Rinna components
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Determine project directory
RINNA_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONFIG_DIR="$RINNA_DIR/config"
PRIMARY_CONFIG="$CONFIG_DIR/rinna.yaml"
ENV_CONFIG_PREFIX="rinna-"
ENV_VAR_PREFIX="RINNA_"
USER_CONFIG_DIR="${HOME}/.rinna/config"
CURRENT_ENV="${RINNA_ENV:-development}"
ENV_CONFIG="$CONFIG_DIR/${ENV_CONFIG_PREFIX}${CURRENT_ENV}.yaml"
USER_ENV_CONFIG="$USER_CONFIG_DIR/${ENV_CONFIG_PREFIX}${CURRENT_ENV}.yaml"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print functions
print_header() { echo -e "${BLUE}$1${NC}"; }
print_success() { echo -e "  ${GREEN}✓ $1${NC}"; }
print_warning() { echo -e "  ${YELLOW}! $1${NC}"; }
print_error() { echo -e "  ${RED}✗ $1${NC}" >&2; }
print_fatal() { echo -e "${RED}Fatal Error: $1${NC}" >&2; exit 1; }

# Check dependencies
check_dependencies() {
  local missing=0

  # Check for Python
  if ! command -v python3 &> /dev/null; then
    print_error "Python 3 is required but not installed"
    missing=1
  fi

  # Check for yq
  if ! command -v yq &> /dev/null; then
    print_error "yq is required but not installed (https://github.com/mikefarah/yq)"
    missing=1
  fi

  # Check for envsubst
  if ! command -v envsubst &> /dev/null; then
    print_error "envsubst is required but not installed (part of gettext package)"
    missing=1
  fi

  # Check for Java (optional)
  if ! command -v java &> /dev/null; then
    print_warning "Java not found - Java-specific config validation will be skipped"
  fi

  # Check for Go (optional)
  if ! command -v go &> /dev/null; then
    print_warning "Go not found - Go-specific config validation will be skipped"
  fi

  if [ $missing -eq 1 ]; then
    print_fatal "Missing required dependencies"
  fi
}

# Load configuration from all sources
load_config() {
  local target_file="$1"
  
  print_header "Loading configuration for environment: $CURRENT_ENV"
  
  # Check if primary config exists
  if [ ! -f "$PRIMARY_CONFIG" ]; then
    print_fatal "Primary configuration file not found: $PRIMARY_CONFIG"
  fi
  
  # Create user config directory if it doesn't exist
  mkdir -p "$USER_CONFIG_DIR"
  
  # Start with the primary config
  cp "$PRIMARY_CONFIG" "$target_file"
  
  # If environment-specific config exists, merge it
  if [ -f "$ENV_CONFIG" ]; then
    print_success "Merging environment config: $ENV_CONFIG"
    # Use yq to merge environment config over primary config
    yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' "$target_file" "$ENV_CONFIG" > "${target_file}.tmp"
    mv "${target_file}.tmp" "$target_file"
  else
    print_warning "No environment config found for '$CURRENT_ENV': $ENV_CONFIG"
  fi
  
  # If user environment-specific config exists, merge it
  if [ -f "$USER_ENV_CONFIG" ]; then
    print_success "Merging user environment config: $USER_ENV_CONFIG"
    # Use yq to merge user environment config over current config
    yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' "$target_file" "$USER_ENV_CONFIG" > "${target_file}.tmp"
    mv "${target_file}.tmp" "$target_file"
  else
    print_warning "No user environment config found for '$CURRENT_ENV': $USER_ENV_CONFIG"
  fi
  
  # Substitute environment variables
  print_success "Substituting environment variables"
  envsubst < "$target_file" > "${target_file}.tmp"
  mv "${target_file}.tmp" "$target_file"
  
  print_success "Configuration loaded successfully"
}

# Validate configuration
validate_config() {
  local config_file="$1"
  
  print_header "Validating configuration"
  
  # Basic validation
  if ! yq eval '.' "$config_file" > /dev/null; then
    print_fatal "Invalid YAML in configuration file: $config_file"
  fi
  
  # Check for required fields
  local required_fields=("project.name" "project.version" "project.environment")
  for field in "${required_fields[@]}"; do
    if [ "$(yq eval ".$field" "$config_file")" == "null" ]; then
      print_error "Required field missing: $field"
      return 1
    fi
  fi
  
  # Check for consistency between ports
  local java_port=$(yq eval '.java.backend.port' "$config_file")
  local go_backend_java_url=$(yq eval '.go.backend.java_url' "$config_file")
  
  if [[ "$go_backend_java_url" == *":$java_port"* ]]; then
    print_success "Java backend port is consistent in configuration"
  else
    print_warning "Java backend port mismatch between java.backend.port ($java_port) and go.backend.java_url ($go_backend_java_url)"
  fi
  
  # Check for sensitive values that should not be in the main config
  local sensitive_fields=(
    "security.token_encryption_key"
    "java.persistence.postgres.password"
    "java.document_service.docmosis.license_key"
    "python.diagrams.lucidchart.api_key"
    "python.diagrams.lucidchart.token"
  )
  
  for field in "${sensitive_fields[@]}"; do
    local value=$(yq eval ".$field" "$config_file")
    if [[ "$value" != "null" && "$value" != '""' && "$value" != "" ]]; then
      print_warning "Sensitive value detected in config file: $field"
      print_warning "This should be set via environment variable: ${ENV_VAR_PREFIX}$(echo "$field" | tr '.' '_' | tr '[:lower:]' '[:upper:]')"
    fi
  done

  # Check for environment-specific settings
  local env=$(yq eval '.project.environment' "$config_file")
  if [[ "$env" != "$CURRENT_ENV" ]]; then
    print_warning "Environment mismatch: config says '$env' but current environment is '$CURRENT_ENV'"
  fi
  
  print_success "Configuration validation complete"
  return 0
}

# Generate language-specific configuration
generate_configs() {
  local config_file="$1"
  
  print_header "Generating language-specific configurations"
  
  # Create language-specific config directories
  mkdir -p "$USER_CONFIG_DIR/java"
  mkdir -p "$USER_CONFIG_DIR/go"
  mkdir -p "$USER_CONFIG_DIR/python"
  
  # Generate Java properties file
  print_success "Generating Java properties configuration"
  # Use yq to extract Java-specific configuration and convert to properties format
  yq eval '.java' "$config_file" | python3 -c '
import sys, yaml, json
config = yaml.safe_load(sys.stdin)
for section, values in config.items():
    if isinstance(values, dict):
        for key, value in values.items():
            if isinstance(value, dict):
                for subkey, subvalue in value.items():
                    print(f"{section}.{key}.{subkey}={subvalue}")
            else:
                print(f"{section}.{key}={value}")
    else:
        print(f"{section}={values}")
' > "$USER_CONFIG_DIR/java/rinna.properties"
  
  # Generate Go YAML file
  print_success "Generating Go YAML configuration"
  yq eval '{project: .project, security: .security, go: .go}' "$config_file" > "$USER_CONFIG_DIR/go/config.yaml"
  
  # Generate Python configuration
  print_success "Generating Python configuration"
  yq eval '{project: .project, python: .python}' "$config_file" > "$USER_CONFIG_DIR/python/config.yaml"
  
  # Generate environment variables file (.env)
  print_success "Generating .env file for environment variables"
  cat > "$USER_CONFIG_DIR/.env" << EOF
# Rinna environment variables
# Generated on $(date)
# Environment: $CURRENT_ENV

# Set the Rinna environment
export RINNA_ENV=${CURRENT_ENV}

# Global project configuration
export RINNA_PROJECT_NAME="$(yq eval '.project.name' "$config_file")"
export RINNA_PROJECT_VERSION="$(yq eval '.project.version' "$config_file")"
export RINNA_PROJECT_ENVIRONMENT="$(yq eval '.project.environment' "$config_file")"
export RINNA_PROJECT_DATA_DIR="$(yq eval '.project.data_dir' "$config_file")"

# Java configuration
export RINNA_JAVA_BACKEND_PORT=$(yq eval '.java.backend.port' "$config_file")
export RINNA_JAVA_BACKEND_CONTEXT_PATH="$(yq eval '.java.backend.context_path' "$config_file")"
export RINNA_JAVA_PERSISTENCE_TYPE="$(yq eval '.java.persistence.type' "$config_file")"

# Go configuration
export RINNA_GO_API_PORT=$(yq eval '.go.api.port' "$config_file")
export RINNA_GO_API_LOG_LEVEL="$(yq eval '.go.api.log_level' "$config_file")"
export RINNA_GO_BACKEND_JAVA_URL="$(yq eval '.go.backend.java_url' "$config_file")"

# Add placeholders for sensitive values (commented out)
#export RINNA_SECURITY_TOKEN_ENCRYPTION_KEY=""
#export RINNA_JAVA_PERSISTENCE_POSTGRES_PASSWORD=""
#export RINNA_JAVA_DOCUMENT_SERVICE_DOCMOSIS_LICENSE_KEY=""
#export RINNA_PYTHON_DIAGRAMS_LUCIDCHART_API_KEY=""
#export RINNA_PYTHON_DIAGRAMS_LUCIDCHART_TOKEN=""
EOF
  
  print_success "Configuration generation complete"
  
  echo -e "\nConfiguration files generated:"
  echo "  - Java:   $USER_CONFIG_DIR/java/rinna.properties"
  echo "  - Go:     $USER_CONFIG_DIR/go/config.yaml"
  echo "  - Python: $USER_CONFIG_DIR/python/config.yaml"
  echo "  - Env:    $USER_CONFIG_DIR/.env"
  echo
  echo "To load environment variables, run:"
  echo "  source $USER_CONFIG_DIR/.env"
}

# Create a template environment config
create_env_config() {
  local env="$1"
  local output_file="$CONFIG_DIR/${ENV_CONFIG_PREFIX}${env}.yaml"
  
  if [ -f "$output_file" ]; then
    read -p "File already exists: $output_file. Overwrite? (y/n) " confirm
    if [[ "$confirm" != "y" ]]; then
      print_warning "Operation cancelled"
      return 1
    fi
  fi
  
  print_header "Creating template environment config for: $env"
  
  cat > "$output_file" << EOF
# Rinna Environment-Specific Configuration - ${env}
#
# This file contains configuration values specific to the '${env}' environment.
# Values here will override those in the main rinna.yaml configuration.
#

project:
  environment: "${env}"

# Override settings based on environment
security:
  enable_cors: $([ "$env" == "production" ] && echo "false" || echo "true")

java:
  backend:
    port: $([ "$env" == "production" ] && echo "8090" || echo "8091")
    enable_swagger: $([ "$env" == "production" ] && echo "false" || echo "true")
  persistence:
    type: $([ "$env" == "production" ] && echo "postgres" || echo "memory")

go:
  api:
    port: $([ "$env" == "production" ] && echo "8080" || echo "8081")
    log_level: $([ "$env" == "production" ] && echo "\"info\"" || echo "\"debug\"")

development:
  auto_reload: $([ "$env" == "production" ] && echo "false" || echo "true")
  mock_services: $([ "$env" == "production" ] && echo "false" || echo "true")
EOF
  
  print_success "Created environment config: $output_file"
}

# Create a user environment config
create_user_config() {
  local env="$1"
  local output_file="$USER_CONFIG_DIR/${ENV_CONFIG_PREFIX}${env}.yaml"
  
  if [ -f "$output_file" ]; then
    read -p "File already exists: $output_file. Overwrite? (y/n) " confirm
    if [[ "$confirm" != "y" ]]; then
      print_warning "Operation cancelled"
      return 1
    fi
  fi
  
  print_header "Creating template user environment config for: $env"
  
  mkdir -p "$USER_CONFIG_DIR"
  
  cat > "$output_file" << EOF
# Rinna User Environment-Specific Configuration - ${env}
#
# This file contains user-specific configuration values for the '${env}' environment.
# Values here will override those in the main rinna.yaml and environment-specific configuration.
#
# This file should NOT be checked into version control.
#

# User-specific overrides for ${env} environment
project:
  data_dir: "${HOME}/.rinna/${env}/data"
  temp_dir: "${HOME}/.rinna/${env}/temp"
  config_dir: "${HOME}/.rinna/${env}/config"

# You can safely store sensitive data here as this file is not version controlled
security:
  token_encryption_key: ""  # Set this for your local environment

java:
  persistence:
    postgres:
      host: "localhost"
      port: 5432
      database: "rinna_${env}"
      username: "rinna_user"
      password: ""  # Set your local password here

java:
  document_service:
    docmosis:
      license_key: ""  # Set your Docmosis license key here

python:
  diagrams:
    lucidchart:
      api_key: ""  # Set your LucidChart API key here
      token: ""    # Set your LucidChart token here
EOF
  
  print_success "Created user environment config: $output_file"
}

# View current effective configuration
view_config() {
  local format="${1:-yaml}"
  # Create target directory if it doesn't exist
  mkdir -p "$RINNA_DIR/target/temp"
  local temp_config="$RINNA_DIR/target/temp/rinna_effective_config.yaml"
  
  load_config "$temp_config"
  
  case "$format" in
    yaml)
      cat "$temp_config"
      ;;
    json)
      yq eval -o=json '.' "$temp_config"
      ;;
    env)
      # Convert YAML to environment variables
      yq eval '.. | select(. != null) | {"key": path | join("_") | upcase, "value": .}' "$temp_config" | \
      sed -e 's/key: /export RINNA_/' -e 's/value: /=/' | \
      grep "^export RINNA_"
      ;;
    properties)
      # Convert YAML to Java properties format
      yq eval '.. | select(. != null) | {"key": path | join("."), "value": .}' "$temp_config" | \
      sed -e 's/key: //' -e 's/value: /=/' | \
      grep -v "^="
      ;;
    *)
      print_error "Unsupported format: $format"
      print_error "Supported formats: yaml, json, env, properties"
      return 1
      ;;
  esac
  
  # Clean up temporary file
  rm -f "$temp_config"
}

# Get a specific configuration value
get_value() {
  local key="$1"
  local format="${2:-raw}"
  # Create target directory if it doesn't exist
  mkdir -p "$RINNA_DIR/target/temp"
  local temp_config="$RINNA_DIR/target/temp/rinna_effective_config.yaml"
  
  load_config "$temp_config"
  
  local value
  value=$(yq eval ".$key" "$temp_config")
  
  if [[ "$value" == "null" ]]; then
    print_error "Configuration key not found: $key"
    rm -f "$temp_config"
    return 1
  fi
  
  case "$format" in
    raw)
      echo "$value"
      ;;
    json)
      yq eval -o=json ".$key" "$temp_config"
      ;;
    env)
      echo "export ${ENV_VAR_PREFIX}$(echo "$key" | tr '.' '_' | tr '[:lower:]' '[:upper:]')=$value"
      ;;
    *)
      print_error "Unsupported format: $format"
      print_error "Supported formats: raw, json, env"
      rm -f "$temp_config"
      return 1
      ;;
  esac
  
  # Clean up temporary file
  rm -f "$temp_config"
}

# Set a configuration value in the user environment config
set_value() {
  local key="$1"
  local value="$2"
  
  local user_env_config="$USER_CONFIG_DIR/${ENV_CONFIG_PREFIX}${CURRENT_ENV}.yaml"
  
  # Create the user config directory and file if they don't exist
  mkdir -p "$USER_CONFIG_DIR"
  
  if [ ! -f "$user_env_config" ]; then
    create_user_config "$CURRENT_ENV"
  fi
  
  print_header "Setting configuration value: $key = $value"
  
  # Use yq to set the value
  # This correctly handles nested paths using dot notation
  yq eval ".$key = $value" -i "$user_env_config"
  
  print_success "Configuration value set in $user_env_config"
  print_success "Run 'rin config generate' to apply changes to language-specific configs"
}

# Display help text
show_help() {
  cat << EOF
${BLUE}rin-config${NC} - Unified configuration management for Rinna

This tool manages configuration across all Rinna components (Java, Go, Python),
providing a single source of truth for all settings.

Usage: rin-config [command] [options]

Commands:
  view [format]        View effective configuration (yaml, json, env, properties)
  get <key> [format]   Get a specific configuration value
  set <key> <value>    Set a configuration value in user environment config
  validate             Validate the current configuration
  generate             Generate language-specific configurations
  create-env <env>     Create a template environment config (dev, staging, prod)
  create-user <env>    Create a user environment config for personal settings
  help                 Show this help message

Options:
  -e, --env <env>      Specify environment (default: development)
  -h, --help           Show this help message

Examples:
  rin config view                 # View the effective configuration in YAML
  rin config view json            # View the effective configuration in JSON
  rin config get java.backend.port # Get a specific value
  rin config set go.api.port 8088 # Set a specific value
  rin config validate             # Validate the current configuration
  rin config generate             # Generate language-specific configs
  rin config create-env staging   # Create a staging environment config
  rin config --env production view # View production configuration

Environment Variables:
  RINNA_ENV            Set the current environment (default: development)
  RINNA_*              Any environment variable with RINNA_ prefix can override
                       configuration values using path with underscores
                       E.g., RINNA_JAVA_BACKEND_PORT=9000

Configuration Files:
  config/rinna.yaml                   Main configuration file (version controlled)
  config/rinna-<env>.yaml             Environment-specific config (version controlled)
  ~/.rinna/config/rinna-<env>.yaml    User environment config (not version controlled)
EOF
}

# Main execution
check_dependencies

# Parse command line arguments
COMMAND=""
KEY=""
VALUE=""
FORMAT="yaml"

while [[ $# -gt 0 ]]; do
  case $1 in
    view|validate|generate|help)
      COMMAND="$1"
      shift
      # Optional format for view command
      if [[ "$COMMAND" == "view" && $# -gt 0 && ! "$1" =~ ^- ]]; then
        FORMAT="$1"
        shift
      fi
      ;;
    get)
      COMMAND="$1"
      shift
      if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
        KEY="$1"
        shift
        # Optional format
        if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
          FORMAT="$1"
          shift
        fi
      else
        print_error "Key must be provided for 'get' command"
        show_help
        exit 1
      fi
      ;;
    set)
      COMMAND="$1"
      shift
      if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
        KEY="$1"
        shift
        if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
          VALUE="$1"
          shift
        else
          print_error "Value must be provided for 'set' command"
          show_help
          exit 1
        fi
      else
        print_error "Key must be provided for 'set' command"
        show_help
        exit 1
      fi
      ;;
    create-env)
      COMMAND="$1"
      shift
      if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
        CURRENT_ENV="$1"
        shift
      else
        print_error "Environment name must be provided for 'create-env' command"
        show_help
        exit 1
      fi
      ;;
    create-user)
      COMMAND="$1"
      shift
      if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
        CURRENT_ENV="$1"
        shift
      else
        print_error "Environment name must be provided for 'create-user' command"
        show_help
        exit 1
      fi
      ;;
    -e|--env)
      if [[ $# -gt 1 && ! "$2" =~ ^- ]]; then
        CURRENT_ENV="$2"
        shift 2
      else
        print_error "Environment name must be provided for --env option"
        show_help
        exit 1
      fi
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      print_error "Unknown command or option: $1"
      show_help
      exit 1
      ;;
  esac
done

# Execute the command
case "$COMMAND" in
  view)
    view_config "$FORMAT"
    ;;
  get)
    get_value "$KEY" "$FORMAT"
    ;;
  set)
    set_value "$KEY" "$VALUE"
    ;;
  validate)
    mkdir -p "$RINNA_DIR/target/temp"
    temp_config="$RINNA_DIR/target/temp/rinna_effective_config.yaml"
    load_config "$temp_config"
    validate_config "$temp_config"
    rm -f "$temp_config"
    ;;
  generate)
    mkdir -p "$RINNA_DIR/target/temp"
    temp_config="$RINNA_DIR/target/temp/rinna_effective_config.yaml"
    load_config "$temp_config"
    generate_configs "$temp_config"
    rm -f "$temp_config"
    ;;
  create-env)
    create_env_config "$CURRENT_ENV"
    ;;
  create-user)
    create_user_config "$CURRENT_ENV"
    ;;
  help|"")
    show_help
    ;;
  *)
    print_error "Unknown command: $COMMAND"
    show_help
    exit 1
    ;;
esac