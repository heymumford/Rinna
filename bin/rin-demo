#!/usr/bin/env bash

#
# rin-demo - Simplified Rinna CLI utility demo
#
# PURPOSE: Command-line utility to demonstrate the three verbosity modes.
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default settings
MODE="terse"
COMMAND=""
FAIL_TEST=false

# Check for a mode flag
if [[ "$1" == "-v" || "$1" == "--verbose" ]]; then
    MODE="verbose"
    shift
elif [[ "$1" == "-e" || "$1" == "--errors" ]]; then
    MODE="errors-only"
    shift
elif [[ "$1" == "-t" || "$1" == "--terse" ]]; then
    MODE="terse"
    shift
elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo -e "${BLUE}rin-demo${NC} - Rinna CLI Demo"
    echo
    echo "Usage: rin-demo [options] [command]"
    echo 
    echo "Commands:"
    echo "  build     Build the project (simulated)"
    echo "  clean     Clean the project (simulated)"
    echo "  test      Run tests (simulated, with --fail to simulate failure)"
    echo "  all       Clean, build, and test (default)"
    echo
    echo "Options:"
    echo "  -v, --verbose    Show all output"
    echo "  -e, --errors     Show only errors"
    echo "  -t, --terse      Show minimal output (default)"
    echo "  -h, --help       Show this help message"
    echo "  --fail           Simulate a test failure"
    echo
    echo "Examples:"
    echo "  ./bin/rin-demo clean               # Clean with terse output"
    echo "  ./bin/rin-demo -v test             # Run tests with verbose output" 
    echo "  ./bin/rin-demo -e test --fail      # Run failing tests with errors-only output"
    echo "  ./bin/rin-demo all                 # Clean, build, and test with terse output"
    exit 0
fi

# Check for --fail flag
for arg in "$@"; do
    if [[ "$arg" == "--fail" ]]; then
        FAIL_TEST=true
    fi
done

# Get the command
if [[ $# -gt 0 && "$1" != "--fail" ]]; then
    COMMAND="$1"
else
    COMMAND="all"
fi

# Show a message about what we're doing
echo -ne "${BLUE}Running command: $COMMAND with mode: $MODE"
if [[ "$FAIL_TEST" == "true" ]]; then
    echo -e " and simulated failure${NC}\n"
else
    echo -e "${NC}\n"
fi

# Function to show progress and success/failure
function show_step() {
    local step="$1"
    local fail="${2:-false}"
    local cmd_time="${3:-1}"
    
    echo -e "${BLUE}${step}...${NC}"
    sleep 0.5  # Simulate processing time
    
    if [[ "$fail" == "true" ]]; then
        echo -e "${RED}✗ ${step} failed in ${cmd_time}s${NC}"
        if [[ "$MODE" != "terse" ]]; then
            echo -e "${RED}Error: Test failure detected in DemoAppTest${NC}"
            echo -e "${RED}  org.opentest4j.AssertionFailedError: expected: <Hello, Rinna!> but was: <Goodbye, Rinna!>${NC}"
            echo -e "${RED}  at com.rinna.DemoAppTest.testGetGreeting(DemoAppTest.java:24)${NC}"
        fi
        return 1
    else
        echo -e "${GREEN}✓ ${step} completed successfully in ${cmd_time}s${NC}"
        return 0
    fi
}

# Function to show test output based on verbosity
function show_test_output() {
    local fail="${1:-false}"
    
    if [[ "$MODE" == "verbose" ]]; then
        echo "Running com.rinna.DemoAppTest"
        if [[ "$fail" == "true" ]]; then
            echo -e "${RED}FAILED${NC}: testGetGreeting"
            echo -e "  ${RED}org.opentest4j.AssertionFailedError: expected: <Hello, Rinna!> but was: <Goodbye, Rinna!>${NC}"
            echo -e "  ${RED}at com.rinna.DemoAppTest.testGetGreeting(DemoAppTest.java:24)${NC}"
            echo "Tests run: 1, Failures: 1, Errors: 0, Skipped: 0"
        else
            echo "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0"
        fi
    elif [[ "$MODE" == "terse" ]]; then
        echo "Running com.rinna.DemoAppTest"
        if [[ "$fail" == "true" ]]; then
            echo -e "${RED}FAILED${NC}: testGetGreeting"
            echo "Tests run: 1, Failures: 1, Errors: 0, Skipped: 0"
        else
            echo "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0"
        fi
    fi
}

# Function to show test summary
function show_test_summary() {
    local fail="${1:-false}"
    
    echo -e "${BLUE}Test summary:${NC}"
    if [[ "$fail" == "true" ]]; then
        echo -e "${GREEN}Tests passed: 0${NC}, ${RED}Tests failed: 1${NC}, Total: 1"
        echo -e "\n${RED}Failed tests:${NC}"
        echo -e "  ${RED}•${NC} com.rinna.DemoAppTest"
    else
        echo -e "${GREEN}Tests passed: 1${NC}, ${RED}Tests failed: 0${NC}, Total: 1"
    fi
}

# Run the command
case "$COMMAND" in
    clean)
        show_step "Cleaning project"
        if [[ "$MODE" == "verbose" ]]; then
            echo "Removing target directories..."
            echo "Deleting build artifacts..."
            echo "Clean completed"
        fi
        ;;
    build)
        show_step "Building project"
        if [[ "$MODE" == "verbose" ]]; then
            echo "Compiling Java source files..."
            echo "Compiling 2 source files"
            echo "Created target/classes directory"
            echo "Compiled DemoApp.class"
            echo "Build completed"
        fi
        ;;
    test)
        if ! show_step "Running tests" "$FAIL_TEST" "2"; then
            show_test_output "$FAIL_TEST"
            show_test_summary "$FAIL_TEST"
            echo -e "\n${YELLOW}Tests completed with failures${NC}"
            exit 1
        else
            show_test_output "$FAIL_TEST"
            show_test_summary "$FAIL_TEST"
        fi
        ;;
    all)
        echo -e "${BLUE}Running complete workflow: clean → build → test${NC}\n"
        
        show_step "Cleaning project"
        if [[ "$MODE" == "verbose" ]]; then
            echo "Removing target directories..."
            echo "Deleting build artifacts..."
            echo "Clean completed"
        fi
        echo ""
        
        show_step "Building project"
        if [[ "$MODE" == "verbose" ]]; then
            echo "Compiling Java source files..."
            echo "Compiling 2 source files"
            echo "Created target/classes directory"
            echo "Compiled DemoApp.class"
            echo "Build completed"
        fi
        echo ""
        
        if ! show_step "Running tests" "$FAIL_TEST" "2"; then
            show_test_output "$FAIL_TEST"
            show_test_summary "$FAIL_TEST"
            echo -e "\n${YELLOW}Workflow completed with test failures${NC}"
            exit 1
        else
            show_test_output "$FAIL_TEST"
            show_test_summary "$FAIL_TEST"
        fi
        ;;
    *)
        echo -e "${RED}Unknown command: $COMMAND${NC}"
        echo "Run './bin/rin-demo --help' for usage information"
        exit 1
        ;;
esac

echo -e "\n${GREEN}Command completed successfully!${NC}"