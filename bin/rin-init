#!/bin/bash
# rin-init - Initialize Rinna for a new user
#
# This command sets up Rinna for a new user by detecting the system credentials
# and setting up appropriate permissions and workspace configuration.

set -e

# Get the project root directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Source common utilities
if [ -f "$SCRIPT_DIR/common/rinna_utils.sh" ]; then
    source "$SCRIPT_DIR/common/rinna_utils.sh"
else
    # Create a minimal version of utilities if not found
    function echo_info() { echo -e "\033[0;34m$1\033[0m"; }
    function echo_success() { echo -e "\033[0;32m$1\033[0m"; }
    function echo_warning() { echo -e "\033[0;33m$1\033[0m"; }
    function echo_error() { echo -e "\033[0;31m$1\033[0m"; }
fi

# Get user information
USERNAME=$(whoami)
HOSTNAME=$(hostname)
PROJECT_NAME=$(basename "$PROJECT_ROOT")
RINNA_CONFIG_DIR="$HOME/.rinna"
RINNA_WORKSPACE_DIR="$PROJECT_ROOT/.rinna"
RINNA_CONFIG_FILE="$RINNA_CONFIG_DIR/config.yaml"
RINNA_AUTH_FILE="$RINNA_CONFIG_DIR/auth.yaml"

# Function to show usage
show_usage() {
    cat << EOF
Usage: rin init [options]

Initialize Rinna for a new user with automatic authentication and authorization.

Options:
  -u, --username USERNAME  Override detected username (default: system username)
  -p, --project NAME       Project name (default: current directory name)
  -f, --force              Force reinitialization even if already initialized
  -v, --verbose            Show detailed output
  -h, --help               Show this help message

Examples:
  rin init                 # Initialize with automatic detection
  rin init --force         # Reinitialize configuration
  rin init --username john # Initialize with specific username
EOF
}

# Default options
FORCE=0
VERBOSE=0

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--username)
            if [[ -z "$2" || "$2" == -* ]]; then
                echo_error "Error: --username requires a value"
                exit 1
            fi
            USERNAME="$2"
            shift 2
            ;;
        -p|--project)
            if [[ -z "$2" || "$2" == -* ]]; then
                echo_error "Error: --project requires a value"
                exit 1
            fi
            PROJECT_NAME="$2"
            shift 2
            ;;
        -f|--force)
            FORCE=1
            shift
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            echo_error "Error: Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Check if already initialized
if [ -f "$RINNA_CONFIG_FILE" ] && [ $FORCE -eq 0 ]; then
    echo_warning "Rinna is already initialized."
    echo "To reinitialize, use the --force option."
    echo "Current configuration: $RINNA_CONFIG_FILE"
    exit 0
fi

# Create config directories
mkdir -p "$RINNA_CONFIG_DIR"
mkdir -p "$RINNA_WORKSPACE_DIR/items"
mkdir -p "$RINNA_WORKSPACE_DIR/workflow"

# Output initialization header
echo "ðŸ”„ Initializing Rinna..."
echo

# Output user detection
echo "âœ… Detected user credentials:"
echo "   Username: $USERNAME"
echo "   Hostname: $HOSTNAME"
echo

# Create global config file
cat > "$RINNA_CONFIG_FILE" << EOF
# Rinna Configuration
# Auto-generated on $(date)

user:
  username: "$USERNAME"
  hostname: "$HOSTNAME"
  created: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

workspace:
  default: "$PROJECT_ROOT"
  current: "$PROJECT_ROOT"

projects:
  - name: "$PROJECT_NAME"
    path: "$PROJECT_ROOT"
    active: true
EOF

echo "âœ… Created configuration in $RINNA_CONFIG_FILE"
echo

# Create auth file with permissions
cat > "$RINNA_AUTH_FILE" << EOF
# Rinna Authorization Configuration
# Auto-generated on $(date)

user: "$USERNAME"
hostname: "$HOSTNAME"
permissions:
  create: true
  read: true
  update: true
  delete: true
  
work_item_types:
  - FEATURE
  - BUG
  - TASK

workflow_stages:
  - TODO
  - IN_PROGRESS
  - REVIEW
  - DONE

roles:
  - OWNER
EOF

# Create workspace file
WORKSPACE_CONFIG_FILE="$RINNA_WORKSPACE_DIR/workspace.yaml"
cat > "$WORKSPACE_CONFIG_FILE" << EOF
# Rinna Workspace Configuration
# Auto-generated on $(date)

name: "$PROJECT_NAME"
path: "$PROJECT_ROOT"
created: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
owner: "$USERNAME@$HOSTNAME"

workflow_stages:
  - name: "TODO"
    description: "Work that needs to be done"
    order: 1
  - name: "IN_PROGRESS"
    description: "Work currently being done"
    order: 2
  - name: "REVIEW"
    description: "Work ready for review"
    order: 3
  - name: "DONE"
    description: "Completed work"
    order: 4

work_item_types:
  - name: "FEATURE"
    description: "New functionality or enhancement"
    color: "blue"
  - name: "BUG"
    description: "Something that needs to be fixed"
    color: "red"
  - name: "TASK"
    description: "General work item"
    color: "green"

members:
  - username: "$USERNAME"
    role: "OWNER"
    permissions:
      create: true
      read: true
      update: true
      delete: true
EOF

echo "âœ… Initialized local workspace for project: $PROJECT_NAME"
echo

# Finalize with welcome message
echo "ðŸŽ‰ Welcome to Rinna, $USERNAME!"
echo "   You are now ready to start tracking your work items."
echo
echo "   To add your first work item, try:"
echo "   rin add --title \"My first task\" --type TASK"
echo
echo "   For more information, run:"
echo "   rin help"

# Touch first run marker if it doesn't exist
FIRST_RUN_MARKER="$HOME/.config/rinna/first_run_complete"
mkdir -p "$(dirname "$FIRST_RUN_MARKER")"
touch "$FIRST_RUN_MARKER"

exit 0