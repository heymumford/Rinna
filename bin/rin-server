#!/usr/bin/env bash
#
# rin-server - Manage the Rinna API server
#
# PURPOSE: Start, stop, or check the status of the Rinna API server
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -eo pipefail

# Determine script and project directories
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Default values
API_SERVER_PORT=9080
JAVA_SERVER_PORT=8081
AUTO_START=true
VERBOSE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Usage information
usage() {
  cat <<EOF
${BLUE}rin-server${NC} - Manage the Rinna API server

Usage: rin-server [options] <command>

Commands:
  start               Start the Rinna API server
  stop                Stop the Rinna API server
  restart             Restart the Rinna API server
  status              Check if the server is running
  configure           Configure server settings
  log                 Show server logs

Options:
  -p, --port PORT     Set API server port (default: $API_SERVER_PORT)
  -j, --java-port PORT Set Java server port (default: $JAVA_SERVER_PORT)
  --no-auto-start     Disable automatic Java server startup
  -v, --verbose       Show verbose output
  -h, --help          Show this help message

Examples:
  rin-server start                     # Start the server with default settings
  rin-server start --port 8080         # Start server on port 8080
  rin-server start --no-auto-start     # Start without auto-starting Java server
  rin-server status                    # Check if server is running
  rin-server stop                      # Stop the server
EOF
}

# Parse command line arguments
parse_args() {
  local positional=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        usage
        exit 0
        ;;
      -p|--port)
        API_SERVER_PORT="$2"
        shift 2
        ;;
      --port=*)
        API_SERVER_PORT="${1#*=}"
        shift
        ;;
      -j|--java-port)
        JAVA_SERVER_PORT="$2"
        shift 2
        ;;
      --java-port=*)
        JAVA_SERVER_PORT="${1#*=}"
        shift
        ;;
      --no-auto-start)
        AUTO_START=false
        shift
        ;;
      -v|--verbose)
        VERBOSE=true
        shift
        ;;
      -*)
        echo -e "${RED}Error: Unknown option: $1${NC}"
        usage
        exit 1
        ;;
      *)
        positional+=("$1")
        shift
        ;;
    esac
  done

  # Set positional arguments
  set -- "${positional[@]}"

  # Get the command
  if [[ $# -eq 0 ]]; then
    echo -e "${RED}Error: No command specified${NC}"
    usage
    exit 1
  fi

  COMMAND="$1"
}

# Check if a server is running on the given port
is_port_in_use() {
  local port=$1
  if command -v nc &>/dev/null; then
    nc -z localhost "$port" &>/dev/null
    return $?
  elif command -v lsof &>/dev/null; then
    lsof -i:"$port" &>/dev/null
    return $?
  else
    (echo > /dev/tcp/localhost/"$port") &>/dev/null
    return $?
  fi
}

# Find the Rinna API server PID
find_api_server_pid() {
  local port=$1
  local pid

  if command -v lsof &>/dev/null; then
    pid=$(lsof -ti:"$port" -sTCP:LISTEN 2>/dev/null)
  else
    # Fallback to ps and grep
    pid=$(ps aux | grep "rinnasrv.*--port=$port" | grep -v grep | awk '{print $2}')
  fi

  echo "$pid"
}

# Start the Rinna API server
start_server() {
  # Check if server is already running
  if is_port_in_use "$API_SERVER_PORT"; then
    echo -e "${YELLOW}Rinna API server is already running on port $API_SERVER_PORT${NC}"
    return 0
  fi

  # Build the command to start the server
  local cmd="$PROJECT_ROOT/api/bin/rinnasrv --port=$API_SERVER_PORT"
  
  # Add auto-start flag if needed
  if [[ "$AUTO_START" == "false" ]]; then
    cmd="$cmd --no-autostart"
  fi

  # Set Java server port if different from default
  if [[ "$JAVA_SERVER_PORT" != "8081" ]]; then
    export JAVA_BACKEND_URL="http://localhost:$JAVA_SERVER_PORT/health"
  fi

  # Start the server
  echo -e "${BLUE}Starting Rinna API server on port $API_SERVER_PORT...${NC}"
  
  if [[ "$VERBOSE" == "true" ]]; then
    $cmd
  else
    $cmd > /dev/null 2>&1 &
  fi
  
  # Wait for server to start
  local max_attempts=30
  local attempts=0
  while ! is_port_in_use "$API_SERVER_PORT" && [[ $attempts -lt $max_attempts ]]; do
    echo -n "."
    sleep 0.5
    ((attempts++))
  done
  echo

  # Check if server started successfully
  if is_port_in_use "$API_SERVER_PORT"; then
    echo -e "${GREEN}Rinna API server started successfully${NC}"
    echo -e "Server is available at ${CYAN}http://localhost:$API_SERVER_PORT${NC}"
    return 0
  else
    echo -e "${RED}Failed to start Rinna API server${NC}"
    return 1
  fi
}

# Stop the Rinna API server
stop_server() {
  local pid
  pid=$(find_api_server_pid "$API_SERVER_PORT")

  if [[ -z "$pid" ]]; then
    echo -e "${YELLOW}Rinna API server is not running${NC}"
    return 0
  fi

  echo -e "${BLUE}Stopping Rinna API server (PID: $pid)...${NC}"
  kill -TERM "$pid" 2>/dev/null || kill -KILL "$pid" 2>/dev/null
  
  # Wait for server to stop
  local max_attempts=10
  local attempts=0
  while is_port_in_use "$API_SERVER_PORT" && [[ $attempts -lt $max_attempts ]]; do
    echo -n "."
    sleep 0.5
    ((attempts++))
  done
  echo

  # Check if server stopped successfully
  if ! is_port_in_use "$API_SERVER_PORT"; then
    echo -e "${GREEN}Rinna API server stopped successfully${NC}"
    return 0
  else
    echo -e "${RED}Failed to stop Rinna API server${NC}"
    return 1
  fi
}

# Check server status
check_status() {
  local pid
  pid=$(find_api_server_pid "$API_SERVER_PORT")

  if [[ -n "$pid" ]]; then
    echo -e "${GREEN}Rinna API server is running${NC}"
    echo -e "  - PID: ${CYAN}$pid${NC}"
    echo -e "  - Port: ${CYAN}$API_SERVER_PORT${NC}"
    echo -e "  - URL: ${CYAN}http://localhost:$API_SERVER_PORT${NC}"
    
    # Check health endpoint
    if command -v curl &>/dev/null; then
      echo -e "\nChecking server health..."
      curl -s "http://localhost:$API_SERVER_PORT/health" | grep -o '"status":"[^"]*"' || true
    fi
    
    return 0
  else
    echo -e "${RED}Rinna API server is not running${NC}"
    return 1
  fi
}

# Restart the server
restart_server() {
  stop_server
  sleep 1
  start_server
}

# Show server logs
show_logs() {
  local log_file="$HOME/.rinna/logs/rinna-api.log"
  
  if [[ ! -f "$log_file" ]]; then
    echo -e "${RED}Log file not found: $log_file${NC}"
    return 1
  fi
  
  echo -e "${BLUE}Showing Rinna API server logs:${NC}"
  if command -v tail &>/dev/null; then
    tail -n 50 "$log_file"
  else
    # Fallback if tail is not available
    cat "$log_file" | head -n 50
  fi
}

# Configure server settings
configure_server() {
  echo -e "${BLUE}Configuring Rinna API server...${NC}"
  
  # Create config directory if it doesn't exist
  local config_dir="$HOME/.rinna/config"
  mkdir -p "$config_dir"
  
  # Create or update config file
  local config_file="$config_dir/config.yaml"
  cat > "$config_file" << EOF
# Rinna API Server Configuration

server:
  port: $API_SERVER_PORT
  host: "localhost"
  shutdownTimeout: 15
  auto_start: $AUTO_START

java:
  host: "localhost"
  port: $JAVA_SERVER_PORT
  connectTimeout: 5000
  requestTimeout: 30000
  # API endpoints
  endpoints:
    workitems: "/api/workitems"
    health: "/health"
EOF
  
  echo -e "${GREEN}Configuration saved to: $config_file${NC}"
}

# Main function
main() {
  parse_args "$@"
  
  case "$COMMAND" in
    start)
      start_server
      ;;
    stop)
      stop_server
      ;;
    restart)
      restart_server
      ;;
    status)
      check_status
      ;;
    configure)
      configure_server
      ;;
    log|logs)
      show_logs
      ;;
    *)
      echo -e "${RED}Error: Unknown command: $COMMAND${NC}"
      usage
      exit 1
      ;;
  esac
}

# Run main function
main "$@"