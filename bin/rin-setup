#!/usr/bin/env bash

#
# rin-setup - Dependency and configuration manager for Rinna
#
# PURPOSE: Verify, install, and configure required dependencies for Rinna
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Determine project directory
RINNA_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONFIG_DIR="$HOME/.config/rinna"
CONFIG_FILE="$CONFIG_DIR/environment.conf"

# Required versions
REQUIRED_JAVA_VERSION="21"
REQUIRED_GO_VERSION="1.21"
REQUIRED_PYTHON_VERSION="3.8"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Print functions
print_header() { echo -e "${BLUE}$1${NC}"; }
print_step() { echo -e "  ${CYAN}$1${NC}"; }
print_success() { echo -e "  ${GREEN}✓ $1${NC}"; }
print_warning() { echo -e "  ${YELLOW}! $1${NC}"; }
print_error() { echo -e "  ${RED}✗ $1${NC}" >&2; }
print_fatal() { echo -e "${RED}Fatal Error: $1${NC}" >&2; exit 1; }

# Print the Rinna logo
print_logo() {
  echo -e "${BLUE}"
  echo "        ____  _"
  echo "       / __ \\(_)___  ____  ____ _"
  echo "      / /_/ / / __ \\/ __ \\/ __ \`/"
  echo "     / _, _/ / / / / / / / /_/ /"
  echo "    /_/ |_/_/_/ /_/_/ /_/\\__,_/"
  echo -e "${NC}"
  echo "    Workflow Management System"
  echo ""
}

# Create or update config file
create_config() {
  mkdir -p "$CONFIG_DIR"
  
  cat > "$CONFIG_FILE" << EOF
# Rinna Environment Configuration
# Generated on $(date)

# Language versions
JAVA_VERSION="$REQUIRED_JAVA_VERSION"
GO_VERSION="$REQUIRED_GO_VERSION"
PYTHON_VERSION="$REQUIRED_PYTHON_VERSION"

# Path overrides (uncomment and set if needed)
# JAVA_HOME="/path/to/java"
# GOROOT="/path/to/go"
# GOPATH="$HOME/go"
# PYTHON_PATH="/path/to/python"

# Proxy settings (uncomment and set if needed)
# HTTP_PROXY=""
# HTTPS_PROXY=""
# NO_PROXY="localhost,127.0.0.1"

# Package manager preferences
# Preferred package manager for dependency installation
# Options: apt, apt-get, dnf, yum, brew, pkg, auto
PACKAGE_MANAGER="auto"

# Auto-update settings
# Set to true to automatically check for and install updates to dependencies
AUTO_UPDATE="false"

# Install options
# Set to ask (default), auto, or never
INSTALL_MISSING="ask"
EOF

  chmod 600 "$CONFIG_FILE"
  print_success "Configuration file created at $CONFIG_FILE"
}

# Load config if exists, otherwise create it
load_config() {
  if [[ ! -f "$CONFIG_FILE" ]]; then
    print_step "Creating configuration file..."
    create_config
  fi
  
  # Source the config file
  source "$CONFIG_FILE"
  
  # Use auto for package manager if not set
  if [[ -z "$PACKAGE_MANAGER" || "$PACKAGE_MANAGER" == "auto" ]]; then
    detect_package_manager
  fi
}

# Detect the appropriate package manager for this system
detect_package_manager() {
  if [[ "$(uname)" == "Darwin" ]]; then
    # macOS
    if command -v brew &>/dev/null; then
      PACKAGE_MANAGER="brew"
    else
      PACKAGE_MANAGER="brew"
      print_warning "Homebrew not found but set as default. Will attempt to install if needed."
    fi
  elif [[ "$(uname)" == "Linux" ]]; then
    # Linux
    if command -v apt &>/dev/null; then
      PACKAGE_MANAGER="apt"
    elif command -v apt-get &>/dev/null; then
      PACKAGE_MANAGER="apt-get"
    elif command -v dnf &>/dev/null; then
      PACKAGE_MANAGER="dnf"
    elif command -v yum &>/dev/null; then
      PACKAGE_MANAGER="yum"
    else
      print_warning "Could not detect package manager. Please install dependencies manually."
      PACKAGE_MANAGER="unknown"
    fi
  elif [[ "$(uname)" == "FreeBSD" ]]; then
    # FreeBSD
    PACKAGE_MANAGER="pkg"
  else
    print_warning "Unsupported operating system: $(uname)"
    PACKAGE_MANAGER="unknown"
  fi
  
  print_step "Detected package manager: $PACKAGE_MANAGER"
}

# Ask user for confirmation
confirm() {
  local prompt="$1"
  local default="${2:-Y}"
  
  if [[ "$INSTALL_MISSING" == "auto" ]]; then
    return 0
  elif [[ "$INSTALL_MISSING" == "never" ]]; then
    return 1
  fi
  
  local options
  if [[ "$default" == "Y" ]]; then
    options="[Y/n]"
  else
    options="[y/N]"
  fi
  
  read -p "$prompt $options " answer
  answer=${answer:-$default}
  
  if [[ "$answer" =~ ^[Yy]$ ]]; then
    return 0
  else
    return 1
  fi
}

# Install packages based on the detected package manager
install_packages() {
  local packages=("$@")
  
  case "$PACKAGE_MANAGER" in
    apt|apt-get)
      # Ubuntu/Debian
      print_step "Updating package index..."
      sudo $PACKAGE_MANAGER update -q
      print_step "Installing packages: ${packages[*]}"
      sudo $PACKAGE_MANAGER install -y "${packages[@]}"
      ;;
    dnf|yum)
      # Fedora/RHEL/CentOS
      print_step "Installing packages: ${packages[*]}"
      sudo $PACKAGE_MANAGER install -y "${packages[@]}"
      ;;
    brew)
      # macOS (Homebrew)
      if ! command -v brew &>/dev/null; then
        print_step "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
      print_step "Installing packages: ${packages[*]}"
      brew install "${packages[@]}"
      ;;
    pkg)
      # FreeBSD
      print_step "Installing packages: ${packages[*]}"
      sudo pkg install -y "${packages[@]}"
      ;;
    *)
      print_error "Unsupported package manager: $PACKAGE_MANAGER"
      return 1
      ;;
  esac
  
  return 0
}

# Add third-party repository
add_repo() {
  local repo="$1"
  local repo_name="${2:-$1}"
  
  case "$PACKAGE_MANAGER" in
    apt|apt-get)
      if ! grep -q "^deb.*$repo" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
        print_step "Adding repository: $repo_name"
        sudo add-apt-repository -y "$repo"
        sudo $PACKAGE_MANAGER update -q
      fi
      ;;
    dnf|yum)
      print_step "Adding repository: $repo_name"
      sudo $PACKAGE_MANAGER config-manager --add-repo "$repo"
      ;;
    *)
      print_warning "Repository management not supported for $PACKAGE_MANAGER"
      ;;
  esac
}

# Check if a command is available
check_command() {
  command -v "$1" &>/dev/null
}

#
# Dependency checking functions
#

# Check Java installation
check_java() {
  print_header "Checking Java installation..."
  
  if check_command java; then
    local java_version
    if java_version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | awk -F '.' '{print $1}'); then
      print_success "Java found: $(java -version 2>&1 | head -n 1)"
      
      if [[ "$java_version" == "$REQUIRED_JAVA_VERSION" ]]; then
        print_success "Java $REQUIRED_JAVA_VERSION requirement met"
        return 0
      else
        print_warning "Java version $java_version found, but version $REQUIRED_JAVA_VERSION is required"
        return 1
      fi
    else
      print_error "Could not determine Java version"
      return 1
    fi
  else
    print_error "Java not found"
    return 1
  fi
}

# Install Java
install_java() {
  print_header "Installing Java $REQUIRED_JAVA_VERSION..."
  
  case "$PACKAGE_MANAGER" in
    apt|apt-get)
      # Ubuntu/Debian approach
      if ! check_command add-apt-repository; then
        install_packages software-properties-common
      fi
      
      add_repo "ppa:openjdk-r/ppa" "OpenJDK PPA"
      install_packages "openjdk-${REQUIRED_JAVA_VERSION}-jdk"
      ;;
    dnf)
      # Fedora approach
      install_packages "java-${REQUIRED_JAVA_VERSION}-openjdk-devel"
      ;;
    yum)
      # RHEL/CentOS approach
      install_packages "java-${REQUIRED_JAVA_VERSION}-openjdk-devel"
      ;;
    brew)
      # macOS approach
      install_packages "openjdk@${REQUIRED_JAVA_VERSION}"
      # Create symlink in /usr/local/opt
      print_step "Creating symlink for Java..."
      sudo ln -sfn "$(brew --prefix)/opt/openjdk@${REQUIRED_JAVA_VERSION}/libexec/openjdk.jdk" /Library/Java/JavaVirtualMachines/openjdk-${REQUIRED_JAVA_VERSION}.jdk
      ;;
    *)
      print_error "Automatic Java installation not supported for $PACKAGE_MANAGER"
      print_step "Please install Java $REQUIRED_JAVA_VERSION manually"
      return 1
      ;;
  esac
  
  # Create/update the activate-java.sh script
  cat > "$RINNA_DIR/activate-java.sh" << EOF
#!/usr/bin/env bash
# Java environment setup for Rinna

# Java Home setup
if [[ -d "/usr/lib/jvm/java-${REQUIRED_JAVA_VERSION}-openjdk-amd64" ]]; then
  export JAVA_HOME="/usr/lib/jvm/java-${REQUIRED_JAVA_VERSION}-openjdk-amd64"
elif [[ -d "/usr/lib/jvm/java-${REQUIRED_JAVA_VERSION}-openjdk" ]]; then
  export JAVA_HOME="/usr/lib/jvm/java-${REQUIRED_JAVA_VERSION}-openjdk"
elif [[ -d "/Library/Java/JavaVirtualMachines/openjdk-${REQUIRED_JAVA_VERSION}.jdk/Contents/Home" ]]; then
  export JAVA_HOME="/Library/Java/JavaVirtualMachines/openjdk-${REQUIRED_JAVA_VERSION}.jdk/Contents/Home"
elif [[ -d "$HOME/.jdks/openjdk-${REQUIRED_JAVA_VERSION}" ]]; then
  export JAVA_HOME="$HOME/.jdks/openjdk-${REQUIRED_JAVA_VERSION}"
elif [[ -d "\$PROGRAMFILES/Java/jdk-${REQUIRED_JAVA_VERSION}" ]]; then
  export JAVA_HOME="\$PROGRAMFILES/Java/jdk-${REQUIRED_JAVA_VERSION}"
elif [[ -d "\$PROGRAMFILES/Eclipse Adoptium/jdk-${REQUIRED_JAVA_VERSION}" ]]; then
  export JAVA_HOME="\$PROGRAMFILES/Eclipse Adoptium/jdk-${REQUIRED_JAVA_VERSION}"
fi

if [[ -n "\$JAVA_HOME" ]]; then
  export PATH="\$JAVA_HOME/bin:\$PATH"
  echo "Using Java \$JAVA_HOME"
  java -version
else
  echo "WARNING: Could not locate Java ${REQUIRED_JAVA_VERSION}"
  echo "Please set JAVA_HOME manually if needed"
fi
EOF
  
  chmod +x "$RINNA_DIR/activate-java.sh"
  print_success "Created Java activation script: activate-java.sh"
  
  # Source the script to set up the environment
  source "$RINNA_DIR/activate-java.sh"
  
  # Verify installation
  if check_java; then
    print_success "Java $REQUIRED_JAVA_VERSION installation successful"
    return 0
  else
    print_error "Java installation failed or version requirements not met"
    return 1
  fi
}

# Check Go installation
check_go() {
  print_header "Checking Go installation..."
  
  if check_command go; then
    local go_version
    if go_version=$(go version | grep -oP 'go\K[0-9]+\.[0-9]+'); then
      print_success "Go found: $(go version)"
      
      # Extract major and minor versions for comparison
      local required_major required_minor go_major go_minor
      IFS='.' read -r required_major required_minor <<< "$REQUIRED_GO_VERSION"
      IFS='.' read -r go_major go_minor <<< "$go_version"
      
      # Check if Go version is greater than or equal to the required version
      if [[ "$go_major" -gt "$required_major" ]] || 
         [[ "$go_major" -eq "$required_major" && "$go_minor" -ge "$required_minor" ]]; then
        print_success "Go $REQUIRED_GO_VERSION requirement met (found $go_version which is compatible)"
        return 0
      else
        print_warning "Go version $go_version found, but version $REQUIRED_GO_VERSION or higher is required"
        return 1
      fi
    else
      print_error "Could not determine Go version"
      return 1
    fi
  else
    print_error "Go not found"
    return 1
  fi
}

# Install Go
install_go() {
  print_header "Installing Go $REQUIRED_GO_VERSION..."
  
  case "$PACKAGE_MANAGER" in
    apt|apt-get)
      # Check if golang-go is new enough in the default repos
      if apt-cache policy golang-go | grep -q "$REQUIRED_GO_VERSION"; then
        install_packages golang-go
      else
        # Add the longsleep/golang-backports PPA for newer Go versions
        if ! check_command add-apt-repository; then
          install_packages software-properties-common
        fi
        
        add_repo "ppa:longsleep/golang-backports" "Go Backports PPA"
        install_packages "golang-${REQUIRED_GO_VERSION}"
      fi
      ;;
    dnf|yum)
      install_packages "golang"
      # Check if the installed version meets the requirement
      if ! check_go; then
        # Alternative: download and install from golang.org
        print_step "Installing Go from golang.org..."
        local arch=$(uname -m)
        [[ "$arch" == "x86_64" ]] && arch="amd64"
        
        local go_tar="go${REQUIRED_GO_VERSION}.linux-${arch}.tar.gz"
        local download_url="https://golang.org/dl/${go_tar}"
        
        mkdir -p "$HOME/go_install"
        curl -L "$download_url" -o "$HOME/go_install/${go_tar}"
        # Safely remove Go installation - don't use rm -rf directly on /usr paths
        if [ -d "/usr/local/go" ]; then
          sudo rm -rf "/usr/local/go"
        fi
        sudo tar -C /usr/local -xzf "$HOME/go_install/${go_tar}"
        rm -rf "$HOME/go_install"
        
        # Add to PATH in profile
        if [[ ! -f "$HOME/.profile" || ! $(grep -q "GOPATH" "$HOME/.profile") ]]; then
          echo 'export PATH=$PATH:/usr/local/go/bin' >> "$HOME/.profile"
          echo 'export GOPATH=$HOME/go' >> "$HOME/.profile"
          echo 'export PATH=$PATH:$GOPATH/bin' >> "$HOME/.profile"
        fi
        
        export PATH=$PATH:/usr/local/go/bin
        export GOPATH=$HOME/go
        export PATH=$PATH:$GOPATH/bin
      fi
      ;;
    brew)
      install_packages go
      ;;
    *)
      print_error "Automatic Go installation not supported for $PACKAGE_MANAGER"
      print_step "Please install Go $REQUIRED_GO_VERSION manually"
      return 1
      ;;
  esac
  
  # Verify installation
  if check_go; then
    print_success "Go $REQUIRED_GO_VERSION installation successful"
    
    # Set up common Go environment variables
    if [[ ! -d "$HOME/go" ]]; then
      mkdir -p "$HOME/go"
    fi
    
    export GOPATH="${GOPATH:-$HOME/go}"
    export PATH="$PATH:$GOPATH/bin"
    
    return 0
  else
    print_error "Go installation failed or version requirements not met"
    return 1
  fi
}

# Check Python installation
check_python() {
  print_header "Checking Python installation..."
  
  local python_cmd=""
  if check_command python3; then
    python_cmd="python3"
  elif check_command python; then
    if python --version 2>&1 | grep -q "Python 3"; then
      python_cmd="python"
    fi
  fi
  
  if [[ -n "$python_cmd" ]]; then
    local python_version
    if python_version=$($python_cmd --version 2>&1 | grep -oP 'Python \K[0-9]+\.[0-9]+'); then
      print_success "Python found: $($python_cmd --version)"
      
      # Extract major and minor versions for comparison
      local required_major required_minor python_major python_minor
      IFS='.' read -r required_major required_minor <<< "$REQUIRED_PYTHON_VERSION"
      IFS='.' read -r python_major python_minor <<< "$python_version"
      
      # Check if Python version is greater than or equal to the required version
      if [[ "$python_major" -gt "$required_major" ]] || 
         [[ "$python_major" -eq "$required_major" && "$python_minor" -ge "$required_minor" ]]; then
        print_success "Python $REQUIRED_PYTHON_VERSION requirement met (found $python_version which is compatible)"
        return 0
      else
        print_warning "Python version $python_version found, but version $REQUIRED_PYTHON_VERSION or higher is required"
        return 1
      fi
    else
      print_error "Could not determine Python version"
      return 1
    fi
  else
    print_error "Python 3 not found"
    return 1
  fi
}

# Install Python
install_python() {
  print_header "Installing Python $REQUIRED_PYTHON_VERSION..."
  
  case "$PACKAGE_MANAGER" in
    apt|apt-get)
      install_packages "python3" "python3-pip" "python3-venv"
      ;;
    dnf|yum)
      install_packages "python3" "python3-pip"
      ;;
    brew)
      install_packages "python@3"
      ;;
    *)
      print_error "Automatic Python installation not supported for $PACKAGE_MANAGER"
      print_step "Please install Python $REQUIRED_PYTHON_VERSION manually"
      return 1
      ;;
  esac
  
  # Install requests package for diagram generation
  print_step "Installing required Python packages..."
  if check_command pip3; then
    pip3 install --user requests
  elif check_command pip; then
    pip install --user requests
  else
    print_warning "pip not found, skipping Python package installation"
  fi
  
  # Verify installation
  if check_python; then
    print_success "Python $REQUIRED_PYTHON_VERSION installation successful"
    return 0
  else
    print_error "Python installation failed or version requirements not met"
    return 1
  fi
}

# Verify Maven is installed
check_maven() {
  print_header "Checking Maven installation..."
  
  if check_command mvn; then
    print_success "Maven found: $(mvn --version | head -n 1)"
    return 0
  else
    print_error "Maven not found"
    return 1
  fi
}

# Install Maven
install_maven() {
  print_header "Installing Maven..."
  
  case "$PACKAGE_MANAGER" in
    apt|apt-get)
      install_packages "maven"
      ;;
    dnf|yum)
      install_packages "maven"
      ;;
    brew)
      install_packages "maven"
      ;;
    *)
      print_error "Automatic Maven installation not supported for $PACKAGE_MANAGER"
      print_step "Please install Maven manually"
      return 1
      ;;
  esac
  
  # Verify installation
  if check_maven; then
    print_success "Maven installation successful"
    return 0
  else
    print_error "Maven installation failed"
    return 1
  fi
}

# Ensure all Rinna CLI scripts are executable
ensure_executables() {
  print_header "Ensuring CLI scripts are executable..."
  
  local bin_files=(
    "$RINNA_DIR/bin/rin"
    "$RINNA_DIR/bin/rin-build"
    "$RINNA_DIR/bin/rin-version"
    "$RINNA_DIR/bin/rin-doc"
    "$RINNA_DIR/bin/rin-diagrams"
    "$RINNA_DIR/bin/generate-c4-diagrams.py"
    "$RINNA_DIR/bin/rin-setup"
    "$RINNA_DIR/bin/setup-python.sh"
    "$RINNA_DIR/bin/install-rinna.sh"
  )
  
  for file in "${bin_files[@]}"; do
    if [[ -f "$file" ]]; then
      chmod +x "$file"
      print_success "Made executable: $(basename "$file")"
    fi
  done
  
  # Add symbolic link to user's bin directory if possible
  local user_bin="$HOME/.local/bin"
  if [[ ! -d "$user_bin" ]]; then
    mkdir -p "$user_bin"
  fi
  
  if [[ -d "$user_bin" ]]; then
    if [[ ! -L "$user_bin/rin" || $(readlink -f "$user_bin/rin") != "$RINNA_DIR/bin/rin" ]]; then
      ln -sf "$RINNA_DIR/bin/rin" "$user_bin/rin"
      print_success "Created symlink in $user_bin/rin"
    fi
    
    # Add bin directory to PATH if not already present
    if ! echo "$PATH" | grep -q "$user_bin"; then
      print_step "Adding $user_bin to PATH in shell profile..."
      
      # Determine shell profile to modify
      local profile_file=""
      if [[ -n "$BASH_VERSION" ]]; then
        if [[ -f "$HOME/.bashrc" ]]; then
          profile_file="$HOME/.bashrc"
        elif [[ -f "$HOME/.bash_profile" ]]; then
          profile_file="$HOME/.bash_profile"
        fi
      elif [[ -n "$ZSH_VERSION" ]]; then
        profile_file="$HOME/.zshrc"
      fi
      
      if [[ -n "$profile_file" ]]; then
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$profile_file"
        print_success "Updated $profile_file"
        print_warning "Please restart your shell or run 'source $profile_file' to update PATH"
      else
        print_warning "Could not determine shell profile to update"
        print_step "Please add '$user_bin' to your PATH manually"
      fi
    fi
  fi
}

# Check the environment for required tools and configs
check_environment() {
  print_header "Checking Rinna environment..."
  local all_passed=true
  
  # Check languages
  if ! check_java; then
    if confirm "Install Java ${REQUIRED_JAVA_VERSION}?"; then
      install_java || all_passed=false
    else
      all_passed=false
    fi
  fi
  
  if ! check_go; then
    if confirm "Install Go ${REQUIRED_GO_VERSION}?"; then
      install_go || all_passed=false
    else
      all_passed=false
    fi
  fi
  
  if ! check_python; then
    if confirm "Install Python ${REQUIRED_PYTHON_VERSION}?"; then
      install_python || all_passed=false
    else
      all_passed=false
    fi
  fi
  
  # Check build tools
  if ! check_maven; then
    if confirm "Install Maven?"; then
      install_maven || all_passed=false
    else
      all_passed=false
    fi
  fi
  
  # Ensure CLI scripts are executable
  ensure_executables
  
  if [[ "$all_passed" == "true" ]]; then
    return 0
  else
    return 1
  fi
}

# Test the development environment
test_environment() {
  print_header "Testing development environment..."
  
  # Test Java build
  print_step "Testing Java build..."
  if ! cd "$RINNA_DIR" && mvn compile -DskipTests -P skip-quality; then
    print_error "Java build test failed"
    return 1
  fi
  print_success "Java build test successful"
  
  # Test Go build
  print_step "Testing Go build..."
  if [[ -d "$RINNA_DIR/api" && -f "$RINNA_DIR/api/go.mod" ]]; then
    if ! cd "$RINNA_DIR/api" && go build ./cmd/healthcheck; then
      print_error "Go build test failed"
      return 1
    fi
    print_success "Go build test successful"
  else
    print_warning "Skipping Go build test (missing go.mod)"
  fi
  
  # Return to project root
  cd "$RINNA_DIR"
  
  print_success "Environment tests passed!"
  return 0
}

# Display help text
show_help() {
  cat << EOF
${BLUE}rin-setup${NC} - Rinna dependency management and configuration

This script verifies, installs, and configures required dependencies for Rinna.

Usage: rin-setup [options]

Options:
  install           Install missing dependencies without prompting
  check             Check for missing dependencies without installing
  config            Create or edit the configuration file
  test              Test the development environment
  python [options]  Set up Python virtual environment
  graphics [opts]   Run the interactive graphical installer
    -f, --fast      Use fast mode (no animations, text-only output)
    --quick         Use quicker animation speed
  help              Show this help message

Python Environment Options:
  When using 'rin-setup python', the following options are available:
    -f, --force     Force recreation of virtual environment
    -v, --verbose   Show detailed output
    -y, --yes       Skip confirmations
    -a, --all       Install optional dependencies
    --help          Show Python setup help message

Examples:
  rin-setup                  # Check and install missing dependencies with prompts
  rin-setup install          # Install missing dependencies without prompting
  rin-setup check            # Check dependencies only, don't install
  rin-setup config           # Edit the configuration file
  rin-setup python           # Set up Python environment (basic)
  rin-setup python --all -f  # Set up Python with all dependencies, force recreation
  rin-setup graphics         # Run the interactive graphical installer
  rin-setup graphics -f     # Run the fast text-only installer
EOF
}

# Edit config file with default editor
edit_config() {
  if [[ ! -f "$CONFIG_FILE" ]]; then
    create_config
  fi
  
  if [[ -n "$EDITOR" ]]; then
    $EDITOR "$CONFIG_FILE"
  elif check_command nano; then
    nano "$CONFIG_FILE"
  elif check_command vim; then
    vim "$CONFIG_FILE"
  else
    print_error "No text editor found. Please edit $CONFIG_FILE manually."
  fi
}

# Main function
main() {
  print_logo
  
  # Parse command line arguments
  local cmd="${1:-check}"
  
  case "$cmd" in
    install)
      INSTALL_MISSING="auto"
      load_config
      check_environment
      test_environment
      ;;
    check)
      INSTALL_MISSING="ask"
      load_config
      check_environment
      ;;
    config)
      load_config
      edit_config
      ;;
    test)
      load_config
      test_environment
      ;;
    python)
      # Execute setup-python.sh with all args passed through
      shift # Remove 'python' from args
      print_header "Setting up Python environment"
      PYTHON_SETUP="$RINNA_DIR/bin/setup-python.sh"
      if [[ -x "$PYTHON_SETUP" ]]; then
        "$PYTHON_SETUP" "$@"
      else
        print_error "bin/setup-python.sh not found or not executable"
        ls -la "$SCRIPT_DIR/setup-python.sh" 2>/dev/null || echo "File does not exist"
      fi
      ;;
    graphics)
      # Execute the graphical installer
      print_header "Starting Graphical Installer"
      GRAPHICS_INSTALLER="$RINNA_DIR/bin/install-rinna.sh"
      
      # Process arguments for graphics installer
      
      if [[ -x "$GRAPHICS_INSTALLER" ]]; then
        # Process arguments
        local fast_mode=false
        local args=()
        
        while [[ $# -gt 0 ]]; do
          case "$1" in
            --fast|-f)
              fast_mode=true
              shift
              ;;
            *)
              args+=("$1")
              shift
              ;;
          esac
        done
        
        # Run installer with appropriate options
        if $fast_mode; then
          "$GRAPHICS_INSTALLER" --fast
        else
          "$GRAPHICS_INSTALLER" "${args[@]}"
        fi
      else
        print_error "bin/install-rinna.sh not found or not executable"
        ls -la "$GRAPHICS_INSTALLER" 2>/dev/null || echo "File does not exist"
      fi
      ;;
    help|--help|-h)
      show_help
      ;;
    *)
      print_error "Unknown command: $cmd"
      show_help
      exit 1
      ;;
  esac
}

# Run main function
main "$@"