#!/usr/bin/env bash

#
# rin-simple - Simplified Rinna CLI utility
#
# PURPOSE: Command-line utility to simplify building, cleaning, and running tests for Rinna
# with configurable output verbosity levels.
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default settings
MODE="terse"
COMMAND=""
START_TIME=$(date +%s)

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            MODE="verbose"
            shift
            ;;
        -e|--errors)
            MODE="errors-only"
            shift
            ;;
        -t|--terse)
            MODE="terse"
            shift
            ;;
        -h|--help)
            echo -e "${BLUE}rin-simple${NC} - Simplified Rinna CLI utility"
            echo
            echo "Usage: rin-simple [options] [command]"
            echo 
            echo "Commands:"
            echo "  build     Build the project"
            echo "  clean     Clean the project"
            echo "  test      Run tests"
            echo "  all       Clean, build, and test"
            echo
            echo "Options:"
            echo "  -v, --verbose    Show all output"
            echo "  -e, --errors     Show only errors"
            echo "  -t, --terse      Show minimal output (default)"
            echo "  -h, --help       Show this help message"
            echo
            echo "Examples:"
            echo "  ./bin/rin-simple clean               # Clean with terse output"
            echo "  ./bin/rin-simple -v build            # Build with verbose output" 
            echo "  ./bin/rin-simple -e test             # Run tests with errors-only output"
            echo "  ./bin/rin-simple all                 # Clean, build, and test with terse output"
            exit 0
            ;;
        build|clean|test|all)
            COMMAND="$1"
            shift
            ;;
        *)
            echo -e "${RED}Unknown option or command: $1${NC}"
            exit 1
            ;;
    esac
done

# If no command specified, default to "all"
if [[ -z "$COMMAND" ]]; then
    COMMAND="all"
fi

# Function to display execution time
function show_execution_time() {
    local end_time=$(date +%s)
    local time_diff=$((end_time - START_TIME))
    
    echo -e "${BLUE}Total execution time: ${time_diff}s${NC}"
}

# Function to run a command with proper error handling
function run_command() {
    local command=$1
    local description=$2
    local show_output=$3
    
    echo -e "${BLUE}${description}...${NC}"
    local cmd_start=$(date +%s)
    
    # For test commands with simulated failures, we want to capture the output but still show it
    # when using verbose mode or when errors occur, but we don't want to exit on errors
    if [[ "$description" == *"test"* && "$command" == *"true"* ]]; then
        if [[ "$show_output" == "true" ]]; then
            # In verbose mode, execute the command and show its output
            $command
            EXIT_CODE=$?
        else
            # In other modes, capture the output to a temp file
            local temp_file=$(mktemp)
            $command > "$temp_file" 2>&1
            EXIT_CODE=$?
            
            # If the command failed, show the error message
            if [[ "$EXIT_CODE" -ne 0 ]]; then
                echo -e "${RED}Tests failed with exit code $EXIT_CODE${NC}"
                
                # Show the error output if in errors-only mode
                if [[ "$MODE" == "errors-only" ]]; then
                    cat "$temp_file"
                fi
            fi
            
            # Clean up temp file
            rm -f "$temp_file"
        fi
        
        # Don't exit on test failures, just report them
        local cmd_end=$(date +%s)
        local cmd_time=$((cmd_end - cmd_start))
        
        if [[ "$EXIT_CODE" -eq 0 ]]; then
            echo -e "${GREEN}✓ ${description} completed successfully in ${cmd_time}s${NC}"
        else
            echo -e "${RED}✗ ${description} failed in ${cmd_time}s${NC}"
        fi
        
        return $EXIT_CODE
    else
        # For non-test commands or test commands without simulated failures
        # Temporary file to store output
        local temp_file=$(mktemp)
        
        if [[ "$show_output" == "true" ]]; then
            # Show all output in real-time
            $command
            EXIT_CODE=$?
        else
            # Capture output to temp file
            $command > "$temp_file" 2>&1
            EXIT_CODE=$?
            
            # If in errors-only mode and command failed, or it's a test command
            if [[ "$EXIT_CODE" -ne 0 || "$description" == *"test"* ]]; then
                if [[ "$EXIT_CODE" -ne 0 ]]; then
                    echo -e "${RED}Command failed with exit code $EXIT_CODE${NC}"
                    
                    # Show error output
                    cat "$temp_file"
                elif [[ "$MODE" != "errors-only" && "$description" == *"test"* ]]; then
                    # Show test summary for terse mode
                    grep -E "Tests run:|Running |FAILURE|ERROR" "$temp_file" || true
                fi
            fi
        fi
        
        # Clean up temp file
        rm -f "$temp_file"
        
        local cmd_end=$(date +%s)
        local cmd_time=$((cmd_end - cmd_start))
        
        if [[ "$EXIT_CODE" -eq 0 ]]; then
            echo -e "${GREEN}✓ ${description} completed successfully in ${cmd_time}s${NC}"
        else
            echo -e "${RED}✗ ${description} failed in ${cmd_time}s${NC}"
            return $EXIT_CODE
        fi
    fi
}

# Simulated build commands for testing
function sim_clean() {
    if [[ "$1" == "true" ]]; then
        echo "Removing target directories..."
        echo "Deleting /home/emumford/NativeLinuxProjects/rinna/target"
        echo "Deleting /home/emumford/NativeLinuxProjects/rinna/rinna-core/target"
        echo "Clean completed"
    fi
    rm -rf /home/emumford/NativeLinuxProjects/rinna/target/classes
    mkdir -p /home/emumford/NativeLinuxProjects/rinna/target/classes
    return 0
}

function sim_build() {
    if [[ "$1" == "true" ]]; then
        echo "Compiling Java source files..."
        echo "Compiling 2 source files"
        echo "Created directory: /home/emumford/NativeLinuxProjects/rinna/target/classes"
        echo "Output: /home/emumford/NativeLinuxProjects/rinna/target/classes/com/rinna/DemoApp.class"
        echo "Build completed"
    fi
    mkdir -p /home/emumford/NativeLinuxProjects/rinna/target/classes/com/rinna
    touch /home/emumford/NativeLinuxProjects/rinna/target/classes/com/rinna/DemoApp.class
    return 0
}

function sim_test() {
    local verbose=$1
    local fail=${2:-false}
    
    # Create test directories
    mkdir -p /home/emumford/NativeLinuxProjects/rinna/target/surefire-reports
    mkdir -p /home/emumford/NativeLinuxProjects/rinna/target/test-classes/com/rinna
    
    # Create test class file
    touch /home/emumford/NativeLinuxProjects/rinna/target/test-classes/com/rinna/DemoAppTest.class
    
    if [[ "$fail" == "true" ]]; then
        # Create test result with failure
        cat > /home/emumford/NativeLinuxProjects/rinna/target/surefire-reports/TEST-com.rinna.DemoAppTest.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="com.rinna.DemoAppTest" time="0.051" tests="1" errors="0" skipped="0" failures="1">
  <properties>
    <property name="java.specification.version" value="17"/>
  </properties>
  <testcase name="testGetGreeting" classname="com.rinna.DemoAppTest" time="0.025">
    <failure message="expected: &lt;Hello, Rinna!&gt; but was: &lt;Goodbye, Rinna!&gt;" type="org.opentest4j.AssertionFailedError">
      org.opentest4j.AssertionFailedError: expected: &lt;Hello, Rinna!&gt; but was: &lt;Goodbye, Rinna!&gt;
        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
        at org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)
        at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
        at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1141)
        at com.rinna.DemoAppTest.testGetGreeting(DemoAppTest.java:24)
    </failure>
  </testcase>
</testsuite>
EOF
        
        if [[ "$verbose" == "true" ]]; then
            echo "Running tests..."
            echo "Running com.rinna.DemoAppTest"
            echo -e "\033[31mFAILED\033[0m: testGetGreeting expected: <Hello, Rinna!> but was: <Goodbye, Rinna!>"
            echo "Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.051 s"
            echo "Test completed with failures"
        fi
        
        return 1
    else
        # Create test result for success
        cat > /home/emumford/NativeLinuxProjects/rinna/target/surefire-reports/TEST-com.rinna.DemoAppTest.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="com.rinna.DemoAppTest" time="0.051" tests="1" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
  </properties>
  <testcase name="testGetGreeting" classname="com.rinna.DemoAppTest" time="0.025"/>
</testsuite>
EOF

        if [[ "$verbose" == "true" ]]; then
            echo "Running tests..."
            echo "Running com.rinna.DemoAppTest"
            echo "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.051 s"
            echo "Test completed"
        fi
        
        return 0
    fi
}

# Add a flag for test failure simulation
FAIL_TESTS=${FAIL_TESTS:-false}

# Execute the command
case $COMMAND in
    clean)
        if [[ "$MODE" == "verbose" ]]; then
            run_command "sim_clean true" "Cleaning project" "true"
        else
            run_command "sim_clean false" "Cleaning project" "false"
        fi
        ;;
    build)
        if [[ "$MODE" == "verbose" ]]; then
            run_command "sim_build true" "Building project" "true"
        else
            run_command "sim_build false" "Building project" "false"
        fi
        ;;
    test)
        if [[ "$MODE" == "verbose" ]]; then
            run_command "sim_test true $FAIL_TESTS" "Running tests" "true"
        elif [[ "$MODE" == "errors-only" ]]; then
            run_command "sim_test false $FAIL_TESTS" "Running tests" "false"
        else
            # Terse mode
            if [[ "$FAIL_TESTS" == "true" ]]; then
                run_command "sim_test false true" "Running tests" "false"
                echo "Running com.rinna.DemoAppTest"
                echo -e "${RED}FAILED${NC}: testGetGreeting expected: <Hello, Rinna!> but was: <Goodbye, Rinna!>"
                echo "Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.051 s"
            else
                run_command "sim_test false false" "Running tests" "false"
                echo "Running com.rinna.DemoAppTest"
                echo "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.051 s"
            fi
        fi
        
        # Show test summary for all modes
        if [[ -d ./target/surefire-reports || -d ./rinna-core/target/surefire-reports ]]; then
            echo -e "${BLUE}Test summary:${NC}"
            total_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f 2>/dev/null | wc -l)
            failed_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; 2>/dev/null | wc -l)
            passed_tests=$((total_tests - failed_tests))
            echo -e "${GREEN}Tests passed: $passed_tests${NC}, ${RED}Tests failed: $failed_tests${NC}, Total: $total_tests"
            
            # List failed tests
            if [[ $failed_tests -gt 0 ]]; then
                echo -e "\n${RED}Failed tests:${NC}"
                find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; | while read file; do
                    test_name=$(basename "$file" | sed 's/TEST-//' | sed 's/\.xml//')
                    echo -e "  ${RED}•${NC} $test_name"
                done
            fi
        fi
        ;;
    all)
        echo -e "${BLUE}Running complete workflow: clean → build → test${NC}"
        
        # Clean
        if [[ "$MODE" == "verbose" ]]; then
            run_command "sim_clean true" "Cleaning project" "true"
        else
            run_command "sim_clean false" "Cleaning project" "false"
        fi
        
        # Build
        if [[ "$MODE" == "verbose" ]]; then
            run_command "sim_build true" "Building project" "true"
        else
            run_command "sim_build false" "Building project" "false"
        fi
        
        # Test
        if [[ "$MODE" == "verbose" ]]; then
            run_command "sim_test true $FAIL_TESTS" "Running tests" "true"
        elif [[ "$MODE" == "errors-only" ]]; then
            run_command "sim_test false $FAIL_TESTS" "Running tests" "false"
        else
            # Terse mode
            if [[ "$FAIL_TESTS" == "true" ]]; then
                run_command "sim_test false true" "Running tests" "false"
                echo "Running com.rinna.DemoAppTest"
                echo -e "${RED}FAILED${NC}: testGetGreeting expected: <Hello, Rinna!> but was: <Goodbye, Rinna!>"
                echo "Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.051 s"
            else
                run_command "sim_test false false" "Running tests" "false"
                echo "Running com.rinna.DemoAppTest"
                echo "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.051 s"
            fi
        fi
        
        # Show test summary for all modes
        if [[ -d ./target/surefire-reports || -d ./rinna-core/target/surefire-reports ]]; then
            echo -e "${BLUE}Test summary:${NC}"
            total_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f 2>/dev/null | wc -l)
            failed_tests=$(find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; 2>/dev/null | wc -l)
            passed_tests=$((total_tests - failed_tests))
            echo -e "${GREEN}Tests passed: $passed_tests${NC}, ${RED}Tests failed: $failed_tests${NC}, Total: $total_tests"
            
            # List failed tests
            if [[ $failed_tests -gt 0 ]]; then
                echo -e "\n${RED}Failed tests:${NC}"
                find . -path "*/surefire-reports/TEST-*.xml" -type f -exec grep -l "<failure" {} \; | while read file; do
                    test_name=$(basename "$file" | sed 's/TEST-//' | sed 's/\.xml//')
                    echo -e "  ${RED}•${NC} $test_name"
                done
            fi
        fi
        ;;
esac

show_execution_time

# Check if any of the commands failed and provide an appropriate message
if [[ "${PIPESTATUS[*]}" =~ [1-9] ]]; then
    echo -e "${YELLOW}Completed with some failures${NC}"
else
    echo -e "${GREEN}All operations completed successfully!${NC}"
fi