#!/usr/bin/env bash

#
# rin-version - Streamlined Rinna version management utility
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Constants
RINNA_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
VERSION_FILE="$RINNA_DIR/version.properties"
README_FILE="$RINNA_DIR/README.md"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# UI Functions
print_header() { echo -e "${BLUE}$1${NC}"; }
print_success() { echo -e "${GREEN}$1${NC}"; }
print_warning() { echo -e "${YELLOW}$1${NC}"; }
print_error() { echo -e "${RED}$1${NC}"; exit 1; }

# Helper Functions
get_version() {
  grep -m 1 "^version=" "$VERSION_FILE" | cut -d'=' -f2
}

get_property() {
  local prop="$1"
  grep -m 1 "^$prop=" "$VERSION_FILE" | cut -d'=' -f2
}

increment_version() {
  local version="$1" index="$2"
  IFS='.' read -r -a parts <<< "$version"
  
  # Increment the specified part
  parts[$index]=$((parts[$index] + 1))
  
  # Reset lower parts to 0
  for ((i=index+1; i<${#parts[@]}; i++)); do
    parts[$i]=0
  done
  
  echo "${parts[0]}.${parts[1]}.${parts[2]}"
}

update_version_properties() {
  local new_version="$1"
  sed -i "s/^version=.*/version=$new_version/" "$VERSION_FILE"
  sed -i "s/^lastUpdated=.*/lastUpdated=$(date +%Y-%m-%d)/" "$VERSION_FILE"
  sed -i "s/^buildNumber=.*/buildNumber=1/" "$VERSION_FILE"
  print_success "Updated version in $VERSION_FILE to $new_version"
}

update_pom_versions() {
  local new_version="$1"
  local pom_files=$(find "$RINNA_DIR" -name "pom.xml")
  
  for pom_file in $pom_files; do
    # Update parent version if it exists
    if grep -q "<parent>" "$pom_file"; then
      awk -v new_version="$new_version" '
      BEGIN { in_parent = 0 }
      /<parent>/ { in_parent = 1; print; next }
      /<\/parent>/ { in_parent = 0; print; next }
      /<version>/ && in_parent { gsub(/>.*</, ">" new_version "<") }
      { print }
      ' "$pom_file" > "${pom_file}.tmp"
      
      mv "${pom_file}.tmp" "$pom_file"
    fi
    
    # Update project version outside of parent
    if grep -q "<version>" "$pom_file"; then
      awk -v version="$new_version" '
      BEGIN { in_parent = 0; done = 0 }
      /<parent>/ { in_parent = 1 }
      /<\/parent>/ { in_parent = 0 }
      /<version>/ && !in_parent && !done {
        sub(/>.*</, ">" version "<"); done = 1
      }
      { print }
      ' "$pom_file" > "${pom_file}.tmp"
      
      mv "${pom_file}.tmp" "$pom_file"
    fi
  done
  
  print_success "Updated version in all POM files to $new_version"
}

update_readme_version() {
  local new_version="$1"
  sed -i -E "s|(\\[\\!\\[Version\\]\\(https://img.shields.io/badge/version-).*(-blue.svg\\)\\])|\\1${new_version}\\2|" "$README_FILE"
  
  # Also update Maven example if it exists
  if grep -q "<artifactId>rinna-core</artifactId>" "$README_FILE"; then
    sed -i -E "s|(<version>)([0-9]+\.[0-9]+\.[0-9]+)(</version>)|\1${new_version}\3|" "$README_FILE"
  fi
  
  print_success "Updated version in $README_FILE to $new_version"
}

verify_consistency() {
  local root_version=$(get_version)
  local inconsistencies=0
  
  print_header "Verifying version consistency across files..."
  echo -e "Root version (from version.properties): ${GREEN}${root_version}${NC}"
  
  # Check POM files
  for pom_file in $(find "$RINNA_DIR" -name "pom.xml"); do
    # Check project version
    if grep -q "<version>" "$pom_file" && ! grep -q "<parent>" "$pom_file"; then
      local project_version=$(grep -m 1 "<version>" "$pom_file" | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
      if [[ "$project_version" != "$root_version" ]]; then
        echo -e "${RED}Project version mismatch in ${pom_file}: ${project_version} (should be ${root_version})${NC}"
        ((inconsistencies++))
      fi
    fi
    
    # Check parent version
    if grep -q "<parent>" "$pom_file"; then
      local parent_version=$(grep -A 3 "<parent>" "$pom_file" | grep "<version>" | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
      if [[ "$parent_version" != "$root_version" ]]; then
        echo -e "${RED}Parent version mismatch in ${pom_file}: ${parent_version} (should be ${root_version})${NC}"
        ((inconsistencies++))
      fi
    fi
  done
  
  # Check README.md
  local readme_version=$(grep -o "version-.*-blue" "$README_FILE" | cut -d '-' -f 2)
  if [[ "$readme_version" != "$root_version" ]]; then
    echo -e "${RED}README version mismatch: ${readme_version} (should be ${root_version})${NC}"
    ((inconsistencies++))
  fi
  
  # Report result
  if [[ $inconsistencies -eq 0 ]]; then
    print_success "All versions are consistent!"
    return 0
  else
    echo -e "${RED}Found ${inconsistencies} version inconsistencies!${NC}"
    return 1
  fi
}

create_git_tag() {
  local version="$1" message="$2"
  local tag_name="v${version}"
  
  if [[ -z "$message" ]]; then
    message="Release version ${version}"
  fi
  
  git tag -a "$tag_name" -m "$message"
  print_success "Created git tag: ${tag_name}"
}

# Command Functions
cmd_current() {
  local current_version=$(get_version)
  IFS='.' read -r major minor patch <<< "$current_version"
  
  # Get other properties
  local last_updated=$(get_property "lastUpdated")
  local release_type=$(get_property "releaseType")
  local build_number=$(get_property "buildNumber")
  
  print_header "Current version information:"
  echo -e "  Version: ${GREEN}${current_version}${NC}"
  echo -e "  Major: ${major}, Minor: ${minor}, Patch: ${patch}"
  echo -e "  Last Updated: ${last_updated}"
  echo -e "  Release Type: ${release_type}"
  echo -e "  Build Number: ${build_number}"
  
  # Check git tag
  if git tag -l "v${current_version}" | grep -q "v${current_version}"; then
    echo -e "  Git tag: ${GREEN}v${current_version}${NC} exists"
  else
    echo -e "  Git tag: ${YELLOW}v${current_version}${NC} does not exist"
  fi
  
  # Check GitHub release
  if command -v gh &> /dev/null && gh release view "v${current_version}" &> /dev/null; then
    echo -e "  GitHub release: ${GREEN}v${current_version}${NC} exists"
  else
    echo -e "  GitHub release: ${YELLOW}v${current_version}${NC} does not exist"
  fi
  
  verify_consistency
}

cmd_verify() {
  verify_consistency
}

cmd_update() {
  local current_version=$(get_version)
  
  print_header "Updating all files to match version.properties (${current_version})"
  update_pom_versions "$current_version"
  update_readme_version "$current_version"
  
  git add "$RINNA_DIR/pom.xml" $(find "$RINNA_DIR" -name "pom.xml" | grep -v "$RINNA_DIR/pom.xml") "$README_FILE"
  git commit -m "Sync version files with version.properties (${current_version})"
  print_success "Committed version changes"
  
  verify_consistency
}

cmd_bump_version() {
  local index="$1" message="$2"
  local current_version=$(get_version)
  local new_version=$(increment_version "$current_version" "$index")
  
  print_header "Bumping version: ${current_version} → ${GREEN}${new_version}${NC}"
  
  update_version_properties "$new_version"
  update_pom_versions "$new_version"
  update_readme_version "$new_version"
  
  git add "$VERSION_FILE" "$RINNA_DIR/pom.xml" $(find "$RINNA_DIR" -name "pom.xml" | grep -v "$RINNA_DIR/pom.xml") "$README_FILE"
  git commit -m "Bump version to ${new_version}"
  print_success "Committed version change"
  
  if [[ -n "$message" ]]; then
    create_git_tag "$new_version" "$message"
  fi
  
  verify_consistency
  
  return 0
}

cmd_set() {
  local new_version="$1" message="$2"
  
  if [[ ! "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    print_error "Invalid version format. Must be in format: X.Y.Z"
  fi
  
  local current_version=$(get_version)
  print_header "Setting version: ${current_version} → ${GREEN}${new_version}${NC}"
  
  update_version_properties "$new_version"
  update_pom_versions "$new_version"
  update_readme_version "$new_version"
  
  git add "$VERSION_FILE" "$RINNA_DIR/pom.xml" $(find "$RINNA_DIR" -name "pom.xml" | grep -v "$RINNA_DIR/pom.xml") "$README_FILE"
  git commit -m "Set version to ${new_version}"
  print_success "Committed version change"
  
  if [[ -n "$message" ]]; then
    create_git_tag "$new_version" "$message"
  fi
  
  verify_consistency
}

cmd_release() {
  local current_version=$(get_version) message="$1"
  
  verify_consistency || print_error "Cannot create release due to version inconsistencies"
  
  if [[ -z "$message" ]]; then
    message="Release version ${current_version}"
  fi
  
  print_header "Creating release for version: ${GREEN}${current_version}${NC}"
  
  # Update release type
  sed -i "s/^releaseType=.*/releaseType=RELEASE/" "$VERSION_FILE"
  git add "$VERSION_FILE"
  git commit -m "Update release type for version ${current_version}"
  
  # Create git tag if it doesn't exist
  if ! git tag -l "v${current_version}" | grep -q "v${current_version}"; then
    create_git_tag "$current_version" "$message"
  else
    echo -e "${YELLOW}Git tag v${current_version} already exists${NC}"
  fi
  
  # Create GitHub release if gh is available
  if command -v gh &> /dev/null; then
    if gh release create "v${current_version}" -t "Rinna ${current_version}" -n "$message"; then
      print_success "Created GitHub release: v${current_version}"
    else
      print_error "Failed to create GitHub release"
    fi
  else
    print_warning "GitHub CLI not installed. Cannot create GitHub release."
  fi
}

cmd_tag() {
  local current_version=$(get_version) message="$1"
  
  verify_consistency || print_error "Cannot create tag due to version inconsistencies"
  
  if [[ -z "$message" ]]; then
    message="Version ${current_version}"
  fi
  
  print_header "Creating git tag for version: ${GREEN}${current_version}${NC}"
  create_git_tag "$current_version" "$message"
}

# Display help
show_help() {
  cat << EOF
${BLUE}rin-version${NC} - Rinna version management utility

Usage: rin-version [command] [options]

Commands:
  current                 Show current version information
  major                   Bump major version (x.0.0)
  minor                   Bump minor version (0.x.0)
  patch                   Bump patch version (0.0.x)
  set <version>           Set to specific version (e.g., 1.2.3)
  release                 Create a release from current version
  tag                     Create a git tag for current version
  verify                  Verify version consistency across files
  update                  Update all files to match version.properties

Options:
  -m, --message <msg>     Custom release/commit message
  -h, --help              Show this help message

Examples:
  rin-version current     # Show current version information
  rin-version patch       # Bump patch version
  rin-version set 2.0.0   # Set version to 2.0.0
EOF
}

# Parse arguments
COMMAND=""
VERSION=""
MESSAGE=""

while [[ $# -gt 0 ]]; do
  case $1 in
    current|major|minor|patch|release|tag|verify|update)
      COMMAND="$1"
      shift
      ;;
    set)
      COMMAND="set"
      if [[ $# -gt 1 && ! "$2" =~ ^- ]]; then
        VERSION="$2"
        shift
      else
        print_error "Version must be provided after 'set' command"
      fi
      shift
      ;;
    -m|--message)
      if [[ $# -gt 1 && ! "$2" =~ ^- ]]; then
        MESSAGE="$2"
        shift
      else
        print_error "Message must be provided after -m/--message"
      fi
      shift
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      print_error "Unknown option or command: $1"
      ;;
  esac
done

# Ensure version.properties exists
if [[ ! -f "$VERSION_FILE" ]]; then
  current_version=$(grep -m 1 "<version>" "$RINNA_DIR/pom.xml" | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
  print_warning "version.properties not found, creating with version $current_version"
  cat > "$VERSION_FILE" << EOF
version=$current_version
lastUpdated=$(date +%Y-%m-%d)
releaseType=SNAPSHOT
buildNumber=1
EOF
fi

# Process command
case "$COMMAND" in
  current)
    cmd_current
    ;;
  verify)
    cmd_verify
    ;;
  update)
    cmd_update
    ;;
  major)
    cmd_bump_version 0 "$MESSAGE"
    ;;
  minor)
    cmd_bump_version 1 "$MESSAGE"
    ;;
  patch)
    cmd_bump_version 2 "$MESSAGE"
    ;;
  set)
    cmd_set "$VERSION" "$MESSAGE"
    ;;
  release)
    cmd_release "$MESSAGE"
    ;;
  tag)
    cmd_tag "$MESSAGE"
    ;;
  *)
    print_error "No command specified"
    ;;
esac