#!/usr/bin/env bash
#
# rin-version - Streamlined Rinna version management utility
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Constants
RINNA_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
VERSION_FILE="$RINNA_DIR/version.properties"
README_FILE="$RINNA_DIR/README.md"

# Helper Functions
get_version() {
  grep -m 1 "^version=" "$VERSION_FILE" | cut -d'=' -f2
}

get_property() {
  local prop="$1"
  grep -m 1 "^$prop=" "$VERSION_FILE" | cut -d'=' -f2
}

increment_version() {
  local version="$1" index="$2"
  IFS='.' read -r -a parts <<< "$version"
  
  # Increment the specified part
  parts[$index]=$((parts[$index] + 1))
  
  # Reset lower parts to 0
  for ((i=index+1; i<${#parts[@]}; i++)); do
    parts[$i]=0
  done
  
  echo "${parts[0]}.${parts[1]}.${parts[2]}"
}

# Determine if a version should have a GitHub release
should_create_github_release() {
  local version="$1" release_type="$2"
  IFS='.' read -r major minor patch <<< "$version"
  
  # Always create releases for major and minor versions
  if [[ "$patch" == "0" ]]; then
    return 0 # true
  fi
  
  # Create releases for explicitly marked RELEASE versions
  if [[ "$release_type" == "RELEASE" ]]; then
    return 0 # true
  fi
  
  # Check for significant patch (patches with PR information)
  local significant_changes=false
  if git tag -l "v${version}" &> /dev/null; then
    # Tag exists, check commit message
    local commit_msg=$(git tag -l --format='%(contents)' "v${version}")
    if [[ -n "$commit_msg" && "$commit_msg" != *"minor fix"* && "$commit_msg" != *"typo"* ]]; then
      # If commit message is substantial, consider it significant
      significant_changes=true
    fi
  fi
  
  # If this patch has significant changes or is explicitly marked
  if $significant_changes; then
    return 0 # true
  fi
  
  # Default to not creating a release for regular patches
  return 1 # false
}

# Function that executes the consolidated version updater
execute_version_update() {
  local current_version="$1"
  local new_version="$2"
  local dry_run="$3"
  local extra_args="$4"
  
  # Check if we have the robust updater
  if [ -x "$RINNA_DIR/bin/robust-version-updater.sh" ]; then
    # Construct the command
    local cmd="$RINNA_DIR/bin/robust-version-updater.sh --from $current_version --to $new_version"
    
    # Add optional arguments
    if [ "$dry_run" = true ]; then
      cmd="$cmd --dry-run"
    fi
    
    # Add any extra arguments
    if [ -n "$extra_args" ]; then
      cmd="$cmd $extra_args"
    fi
    
    # Run the command and return its exit code
    $cmd
    return $?
  else
    echo "Error: robust-version-updater.sh not found"
    return 1
  fi
}

# Command: Show current version
cmd_current() {
  local current_version=$(get_version)
  IFS='.' read -r major minor patch <<< "$current_version"
  
  # Get other properties
  local last_updated=$(get_property "lastUpdated")
  local release_type=$(get_property "releaseType")
  local build_number=$(get_property "buildNumber")
  
  echo "Current version information:"
  echo "  Version: $current_version"
  echo "  Major: $major, Minor: $minor, Patch: $patch"
  echo "  Last Updated: $last_updated"
  echo "  Release Type: $release_type"
  echo "  Build Number: $build_number"
  
  # Check git tag
  if git tag -l "v${current_version}" | grep -q "v${current_version}"; then
    echo "  Git tag: v${current_version} exists"
  else
    echo "  Git tag: v${current_version} does not exist"
  fi
  
  # Check GitHub release
  if command -v gh &> /dev/null && gh release view "v${current_version}" &> /dev/null; then
    echo "  GitHub release: v${current_version} exists"
  else
    echo "  GitHub release: v${current_version} does not exist"
  fi
  
  # Show release eligibility
  if should_create_github_release "$current_version" "$release_type"; then
    echo "  GitHub release: Eligible for GitHub release"
  else
    echo "  GitHub release: Not eligible for GitHub release (minor patch or SNAPSHOT)"
  fi
  
  # Verify version consistency - use the robust updater in dry run mode
  execute_version_update "$current_version" "$current_version" true "--verbose"
}

# Command: Verify version consistency
cmd_verify() {
  local current_version=$(get_version)
  local exit_code=0
  
  echo "Verifying version consistency across files:"
  echo "=========================================="
  
  # Display current version from version.properties
  echo "Current version from version.properties: $current_version"
  echo
  
  # Check version in main POM
  echo "Checking POM files:"
  pom_version=$(grep -m 1 "<version>" "$RINNA_DIR/pom.xml" | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
  if [[ "$pom_version" == "$current_version" ]]; then
    echo "✅ Main pom.xml: $pom_version"
  else
    echo "❌ Main pom.xml: $pom_version (should be $current_version)"
    exit_code=1
  fi
  
  # Check module POM files
  for module_pom in "$RINNA_DIR/rinna-core/pom.xml" "$RINNA_DIR/rinna-cli/pom.xml" "$RINNA_DIR/rinna-data-sqlite/pom.xml"; do
    if [ -f "$module_pom" ]; then
      parent_version=$(grep -A 3 "<parent>" "$module_pom" | grep -m 1 "<version>" | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
      if [[ "$parent_version" == "$current_version" ]]; then
        echo "✅ $(basename $(dirname "$module_pom"))/pom.xml: $parent_version"
      else
        echo "❌ $(basename $(dirname "$module_pom"))/pom.xml: $parent_version (should be $current_version)"
        exit_code=1
      fi
    fi
  done
  
  echo
  echo "Checking README badge:"
  # Check README badge
  readme_version=$(grep -m 1 "badge/version-" "$README_FILE" | grep -o -E "version-[0-9.]*-" | sed -E 's/version-(.*)-.*/\1/')
  if [[ "$readme_version" == "$current_version" ]]; then
    echo "✅ README badge: $readme_version"
  else
    echo "❌ README badge: $readme_version (should be $current_version)"
    exit_code=1
  fi
  
  echo
  echo "Checking Go version files:"
  # Check Go version files
  for go_file in $(find "$RINNA_DIR/api" "$RINNA_DIR/version-service" -name "version.go" -type f 2>/dev/null); do
    if [ -f "$go_file" ]; then
      go_version=$(grep "Version.*=" "$go_file" | grep -o '"[0-9.]*"' | tr -d '"')
      rel_path=${go_file#$RINNA_DIR/}
      if [[ "$go_version" == "$current_version" ]]; then
        echo "✅ $rel_path: $go_version"
      else
        echo "❌ $rel_path: $go_version (should be $current_version)"
        exit_code=1
      fi
    fi
  done
  
  echo
  echo "Checking Python files:"
  # Check Python version
  if [ -f "$RINNA_DIR/pyproject.toml" ]; then
    python_version=$(grep "python_version" "$RINNA_DIR/pyproject.toml" | head -1 | grep -o '"[0-9.]*"' | tr -d '"')
    if [[ "$python_version" == "$current_version" ]]; then
      echo "✅ pyproject.toml: $python_version"
    else
      echo "❌ pyproject.toml: $python_version (should be $current_version)"
      exit_code=1
    fi
  fi
  
  echo
  echo "Checking build information:"
  # Check build number
  build_number=$(grep -m 1 "^buildNumber=" "$VERSION_FILE" | cut -d'=' -f2)
  echo "• Build number: $build_number"
  
  # Check Git tag
  if git tag -l "v${current_version}" | grep -q "v${current_version}"; then
    echo "✅ Git tag v${current_version} exists"
  else
    echo "⚠️ Git tag v${current_version} does not exist"
  fi
  
  # Execute the full verification with the robust updater
  echo
  echo "Running detailed verification:"
  execute_version_update "$current_version" "$current_version" true "--verbose"
  updater_result=$?
  
  if [[ $exit_code -eq 0 && $updater_result -eq 0 ]]; then
    echo
    echo "✅ All version references are consistent"
    return 0
  else
    echo
    echo "❌ Version inconsistencies detected"
    return 1
  fi
}

# Command: Update all version references
cmd_update() {
  local current_version=$(get_version)
  
  echo "Updating all files to match version.properties ($current_version)"
  execute_version_update "$current_version" "$current_version" false "--verbose"
  
  # Ensure README badges are updated
  if [ -x "$RINNA_DIR/bin/update-version-badges.sh" ]; then
    echo "Updating README badges..."
    "$RINNA_DIR/bin/update-version-badges.sh"
  fi
  
  # Add all affected files to git
  echo "Adding updated files to git..."
  git add "$VERSION_FILE" $(find "$RINNA_DIR" -name "pom.xml") "$README_FILE" 
  git add $(find "$RINNA_DIR/api" -name "version.go" -type f) 2>/dev/null || true
  git add "$RINNA_DIR/pyproject.toml" 2>/dev/null || true
  
  # Commit the changes
  git commit -m "Sync version files with version.properties (${current_version})"
  echo "Committed version changes"
}

# Command: Bump version (major, minor, patch)
cmd_bump_version() {
  local index="$1" message="$2" dry_run="$3"
  local current_version=$(get_version)
  local new_version=$(increment_version "$current_version" "$index")
  
  echo "Bumping version: ${current_version} → ${new_version}"
  
  if [ "$dry_run" = "true" ]; then
    # For dry run, just execute the version updater in dry-run mode
    execute_version_update "$current_version" "$new_version" true "--verbose"
    echo "Dry run complete: ${current_version} → ${new_version} (no changes were made)"
    return 0
  fi
  
  # First update version.properties manually to ensure the property file is updated
  local major=$(echo "$new_version" | cut -d. -f1)
  local minor=$(echo "$new_version" | cut -d. -f2)
  local patch=$(echo "$new_version" | cut -d. -f3)
  local current_timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  
  # Get the current build number so we can preserve it
  current_build=$(grep -m 1 "^buildNumber=" "$VERSION_FILE" | cut -d'=' -f2)
  # Default to 1 if build number can't be found
  if [ -z "$current_build" ]; then
    current_build=1
  else
    # Increment the build number
    current_build=$((current_build + 1))
  fi

  # Update version properties directly
  sed -i "s/^version=.*/version=$new_version/" "$VERSION_FILE"
  sed -i "s/^version.major=.*/version.major=$major/" "$VERSION_FILE"
  sed -i "s/^version.minor=.*/version.minor=$minor/" "$VERSION_FILE"
  sed -i "s/^version.patch=.*/version.patch=$patch/" "$VERSION_FILE"
  sed -i "s/^version.full=.*/version.full=$new_version/" "$VERSION_FILE"
  sed -i "s/^lastUpdated=.*/lastUpdated=$(date +%Y-%m-%d)/" "$VERSION_FILE"
  sed -i "s/^buildNumber=.*/buildNumber=$current_build/" "$VERSION_FILE"
  sed -i "s/^build.timestamp=.*/build.timestamp=$current_timestamp/" "$VERSION_FILE"
  
  # Execute the version update
  execute_version_update "$current_version" "$new_version" false "--verbose"
  
  # Ensure README badges are updated
  if [ -x "$RINNA_DIR/bin/update-version-badges.sh" ]; then
    echo "Updating README badges..."
    "$RINNA_DIR/bin/update-version-badges.sh"
  fi
  
  # Generate architecture diagrams for major or minor version bumps
  if [[ "$index" -eq 0 || "$index" -eq 1 ]]; then
    if [[ -x "$RINNA_DIR/bin/rin-diagrams" ]]; then
      echo "Generating updated architecture diagrams for ${new_version}..."
      "$RINNA_DIR/bin/rin-diagrams" --force || echo "Failed to generate architecture diagrams"
      
      # Add new diagrams to git if they were created
      if [[ -d "$RINNA_DIR/docs/architecture/diagrams" ]]; then
        git add "$RINNA_DIR/docs/architecture"
      fi
    fi
  fi
  
  # Add all affected files to git
  echo "Adding version files to git..."
  git add "$VERSION_FILE" $(find "$RINNA_DIR" -name "pom.xml") "$README_FILE" 
  git add $(find "$RINNA_DIR/api" -name "version.go" -type f) 2>/dev/null || true
  git add "$RINNA_DIR/pyproject.toml" 2>/dev/null || true
  
  # Commit changes
  git commit -m "Bump version to ${new_version}"
  echo "Committed version change"
  
  # Create git tag if message provided
  if [[ -n "$message" ]]; then
    git tag -a "v${new_version}" -m "$message"
    echo "Created git tag: v${new_version}"
  fi
  
  echo "Version bump complete: ${current_version} → ${new_version}"
  
  # Display version consistency information
  echo
  echo "Version Consistency Verification:"
  echo "================================="
  
  # Check version in version.properties
  properties_version=$(grep -m 1 "^version=" "$VERSION_FILE" | cut -d'=' -f2)
  echo "• version.properties: $properties_version"
  
  # Check version in main POM
  pom_version=$(grep -m 1 "<version>" "$RINNA_DIR/pom.xml" | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
  echo "• pom.xml: $pom_version"
  
  # Check build number in version.properties
  build_number=$(grep -m 1 "^buildNumber=" "$VERSION_FILE" | cut -d'=' -f2)
  echo "• Build number: $build_number"
  
  # Check version in README badge
  readme_version=$(grep -m 1 "badge/version-" "$README_FILE" | grep -o -E "version-[0-9.]*-" | sed -E 's/version-(.*)-.*/\1/')
  echo "• README badge: $readme_version"
  
  # Check all git tags
  echo "• Git tag: $(git tag -l "v${new_version}" | grep -q "v${new_version}" && echo "exists" || echo "does not exist")"
  
  # Check for inconsistencies
  if [[ "$properties_version" != "$new_version" || "$pom_version" != "$new_version" || "$readme_version" != "$new_version" ]]; then
    echo
    echo "⚠️  WARNING: Version inconsistencies detected!"
    echo "  Run 'bin/rin-version verify' for detailed information"
  else
    echo
    echo "✅ All checked versions are consistent"
  fi
}

# Command: Set specific version
cmd_set() {
  local new_version="$1" message="$2" dry_run="$3"
  
  if [[ ! "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Error: Invalid version format. Must be in format: X.Y.Z"
    exit 1
  fi
  
  local current_version=$(get_version)
  echo "Setting version: ${current_version} → ${new_version}"
  
  if [ "$dry_run" = "true" ]; then
    # For dry run, just execute the version updater in dry-run mode
    execute_version_update "$current_version" "$new_version" true "--verbose"
    echo "Dry run complete: ${current_version} → ${new_version} (no changes were made)"
    return 0
  fi
  
  # First update version.properties manually to ensure the property file is updated
  local major=$(echo "$new_version" | cut -d. -f1)
  local minor=$(echo "$new_version" | cut -d. -f2)
  local patch=$(echo "$new_version" | cut -d. -f3)
  local current_timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  
  # Get the current build number so we can preserve it
  current_build=$(grep -m 1 "^buildNumber=" "$VERSION_FILE" | cut -d'=' -f2)
  # Default to 1 if build number can't be found
  if [ -z "$current_build" ]; then
    current_build=1
  else
    # Increment the build number for new versions
    current_build=$((current_build + 1))
  fi

  # Update version properties directly
  sed -i "s/^version=.*/version=$new_version/" "$VERSION_FILE"
  sed -i "s/^version.major=.*/version.major=$major/" "$VERSION_FILE"
  sed -i "s/^version.minor=.*/version.minor=$minor/" "$VERSION_FILE"
  sed -i "s/^version.patch=.*/version.patch=$patch/" "$VERSION_FILE"
  sed -i "s/^version.full=.*/version.full=$new_version/" "$VERSION_FILE"
  sed -i "s/^lastUpdated=.*/lastUpdated=$(date +%Y-%m-%d)/" "$VERSION_FILE"
  sed -i "s/^buildNumber=.*/buildNumber=$current_build/" "$VERSION_FILE"
  sed -i "s/^build.timestamp=.*/build.timestamp=$current_timestamp/" "$VERSION_FILE"
  
  # Execute the version update
  execute_version_update "$current_version" "$new_version" false "--verbose"
  
  # Ensure README badges are updated
  if [ -x "$RINNA_DIR/bin/update-version-badges.sh" ]; then
    echo "Updating README badges..."
    "$RINNA_DIR/bin/update-version-badges.sh"
  fi
  
  # Generate architecture diagrams for major version changes or when changing to x.0.0 versions
  if [[ "${new_version%.*}" != "${current_version%.*}" ]] || [[ "${new_version}" =~ ^[0-9]+\.0\.0$ ]]; then
    if [[ -x "$RINNA_DIR/bin/rin-diagrams" ]]; then
      echo "Generating updated architecture diagrams for ${new_version}..."
      "$RINNA_DIR/bin/rin-diagrams" --force || echo "Failed to generate architecture diagrams"
      
      # Add new diagrams to git if they were created
      if [[ -d "$RINNA_DIR/docs/architecture/diagrams" ]]; then
        git add "$RINNA_DIR/docs/architecture"
      fi
    fi
  fi
  
  # Add all affected files to git
  echo "Adding version files to git..."
  git add "$VERSION_FILE" $(find "$RINNA_DIR" -name "pom.xml") "$README_FILE"
  git add $(find "$RINNA_DIR/api" -name "version.go" -type f) 2>/dev/null || true
  git add "$RINNA_DIR/pyproject.toml" 2>/dev/null || true
  
  # Commit changes
  git commit -m "Set version to ${new_version}"
  echo "Committed version change"
  
  # Create git tag if message provided
  if [[ -n "$message" ]]; then
    git tag -a "v${new_version}" -m "$message"
    echo "Created git tag: v${new_version}"
  fi
  
  echo "Version update complete: ${current_version} → ${new_version}"
  
  # Display version consistency information
  echo
  echo "Version Consistency Verification:"
  echo "================================="
  
  # Check version in version.properties
  properties_version=$(grep -m 1 "^version=" "$VERSION_FILE" | cut -d'=' -f2)
  echo "• version.properties: $properties_version"
  
  # Check version in main POM
  pom_version=$(grep -m 1 "<version>" "$RINNA_DIR/pom.xml" | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
  echo "• pom.xml: $pom_version"
  
  # Check build number in version.properties
  build_number=$(grep -m 1 "^buildNumber=" "$VERSION_FILE" | cut -d'=' -f2)
  echo "• Build number: $build_number"
  
  # Check version in README badge
  readme_version=$(grep -m 1 "badge/version-" "$README_FILE" | grep -o -E "version-[0-9.]*-" | sed -E 's/version-(.*)-.*/\1/')
  echo "• README badge: $readme_version"
  
  # Check all git tags
  echo "• Git tag: $(git tag -l "v${new_version}" | grep -q "v${new_version}" && echo "exists" || echo "does not exist")"
  
  # Check for inconsistencies
  if [[ "$properties_version" != "$new_version" || "$pom_version" != "$new_version" || "$readme_version" != "$new_version" ]]; then
    echo
    echo "⚠️  WARNING: Version inconsistencies detected!"
    echo "  Run 'bin/rin-version verify' for detailed information"
  else
    echo
    echo "✅ All checked versions are consistent"
  fi
}

# Command: Create release
cmd_release() {
  local current_version=$(get_version) message="$1" force_github="$2"
  
  # Verify consistency
  cmd_verify || {
    echo "Error: Cannot create release due to version inconsistencies"
    exit 1
  }
  
  if [[ -z "$message" ]]; then
    message="Release version ${current_version}"
  fi
  
  echo "Creating release for version: ${current_version}"
  
  # Check if there are uncommitted changes
  if ! git diff --quiet || ! git diff --cached --quiet; then
    echo "Uncommitted changes detected in repository"
    echo "Please commit or stash your changes before creating a release"
    exit 1
  fi
  
  # Update release type if needed
  local current_release_type=$(get_property "releaseType")
  if [[ "$current_release_type" != "RELEASE" ]]; then
    sed -i "s/^releaseType=.*/releaseType=RELEASE/" "$VERSION_FILE"
    git add "$VERSION_FILE"
    git commit -m "Update release type for version ${current_version}"
    echo "Updated release type to RELEASE"
  fi
  
  # Create git tag if it doesn't exist
  if ! git tag -l "v${current_version}" | grep -q "v${current_version}"; then
    git tag -a "v${current_version}" -m "$message"
    echo "Created git tag: v${current_version}"
  else
    echo "Git tag v${current_version} already exists"
  fi
  
  # Determine if this version should have a GitHub release
  local create_gh_release="$force_github"
  if [[ "$create_gh_release" != "true" ]]; then
    if should_create_github_release "$current_version" "RELEASE"; then
      create_gh_release="true"
      echo "Version ${current_version} qualifies for a GitHub release"
    else
      echo "Version ${current_version} does not qualify for automatic GitHub release"
      
      # Ask if user wants to create one anyway
      read -p "Create GitHub release anyway? [y/N] " -r
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        create_gh_release="true"
      fi
    fi
  fi
  
  # Create GitHub release if appropriate
  if [[ "$create_gh_release" == "true" ]] && command -v gh &> /dev/null; then
    # Collect release notes
    local notes=""
    if [[ -f "CHANGELOG.md" ]]; then
      # Try to extract this version's notes from CHANGELOG
      local changelog_section=$(sed -n "/## \[${current_version}\]/,/## \[/p" CHANGELOG.md | sed '$d')
      if [[ -n "$changelog_section" ]]; then
        notes="$changelog_section"
      fi
    fi
    
    # If no notes from changelog, generate from commits
    if [[ -z "$notes" ]]; then
      # Find the previous tag to compare against
      local prev_tag=$(git describe --abbrev=0 --tags "v${current_version}^" 2>/dev/null || echo "")
      if [[ -n "$prev_tag" ]]; then
        notes="## Changes since ${prev_tag}\n\n$(git log --pretty=format:"* %s" ${prev_tag}..v${current_version})"
      else
        notes="$message"
      fi
    fi
    
    # Create the GitHub release
    if echo -e "$notes" | gh release create "v${current_version}" -t "Rinna ${current_version}" -F -; then
      echo "Created GitHub release: v${current_version}"
    else
      echo "Error: Failed to create GitHub release"
      exit 1
    fi
  elif [[ "$create_gh_release" == "true" ]]; then
    echo "GitHub CLI not installed. Cannot create GitHub release."
  fi
}

# Command: Create git tag
cmd_tag() {
  local current_version=$(get_version) message="$1"
  
  # Verify consistency
  cmd_verify || {
    echo "Error: Cannot create tag due to version inconsistencies"
    exit 1
  }
  
  if [[ -z "$message" ]]; then
    message="Version ${current_version}"
  fi
  
  echo "Creating git tag for version: ${current_version}"
  git tag -a "v${current_version}" -m "$message"
  echo "Created git tag: v${current_version}"
}

# Display help
show_help() {
  cat << EOF
rin-version - Rinna version management utility

Usage: rin-version [command] [options]

Commands:
  current                 Show current version information
  major                   Bump major version (x.0.0)
  minor                   Bump minor version (0.x.0)
  patch                   Bump patch version (0.0.x)
  set <version>           Set to specific version (e.g., 1.2.3)
  release                 Create a release from current version
  tag                     Create a git tag for current version
  verify                  Verify version consistency across files
  update                  Update all files to match version.properties
  push                    Push changes to remote and verify consistency

Options:
  -m, --message <msg>     Custom release/commit message
  -g, --github            Force GitHub release creation (regardless of version type)
  -d, --dry-run           Preview changes without making modifications
  -h, --help              Show this help message

Release Behavior:
  - Git tags are created for ALL version changes
  - GitHub releases are automatically created for:
    • Major versions (x.0.0)
    • Minor versions (0.x.0) 
    • Significant patch versions (based on commit message)
    • Versions explicitly marked as RELEASE type
  - For other patch versions, you'll be prompted to create a GitHub release
  - Use --github to force GitHub release creation for any version

Version Updates:
  - Only Rinna project versions are updated in POM files (org.rinna groupId)
  - Dependency versions are NEVER updated to avoid unintended version changes
  - Python components read from the central version.properties file
  - Go components have version info updated in their respective files

Examples:
  rin-version current       # Show current version information
  rin-version patch         # Bump patch version
  rin-version minor --dry-run  # Preview minor version bump without making changes
  rin-version set 2.0.0     # Set version to 2.0.0
  rin-version release -g    # Force GitHub release creation
EOF
}

# Command: Push version changes
cmd_push() {
  local current_version=$(get_version)
  
  # Check if there are any changes to push
  if git status --porcelain | grep -q .; then
    echo "Error: There are uncommitted changes in the repository."
    echo "Please commit your changes before pushing."
    return 1
  fi
  
  # Get the current branch name
  local branch=$(git rev-parse --abbrev-ref HEAD)
  
  echo "Pushing version $current_version to remote (branch: $branch)..."
  if git push; then
    echo "Successfully pushed to remote"
    
    # Verify version consistency after push
    echo
    echo "Post-Push Version Verification:"
    echo "============================="
    
    # Check version in version.properties
    properties_version=$(grep -m 1 "^version=" "$VERSION_FILE" | cut -d'=' -f2)
    echo "• version.properties: $properties_version"
    
    # Check version in main POM
    pom_version=$(grep -m 1 "<version>" "$RINNA_DIR/pom.xml" | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
    echo "• pom.xml: $pom_version"
    
    # Check build number in version.properties
    build_number=$(grep -m 1 "^buildNumber=" "$VERSION_FILE" | cut -d'=' -f2)
    echo "• Build number: $build_number"
    
    # Check version in README badge
    readme_version=$(grep -m 1 "badge/version-" "$README_FILE" | grep -o -E "version-[0-9.]*-" | sed -E 's/version-(.*)-.*/\1/')
    echo "• README badge: $readme_version"
    
    # Check Git info
    remote_url=$(git remote get-url origin)
    echo "• Git remote: $remote_url"
    echo "• Latest commit: $(git rev-parse --short HEAD) - $(git log -1 --pretty=%B | head -1)"
    
    # Push tags if they exist
    if git tag -l "v${current_version}" | grep -q "v${current_version}"; then
      echo "• Git tag v${current_version} exists locally"
      
      # Check if tag exists on remote
      if git ls-remote --tags origin "refs/tags/v${current_version}" | grep -q "refs/tags/v${current_version}"; then
        echo "• Git tag v${current_version} exists on remote"
      else
        echo "• Pushing tag v${current_version} to remote..."
        git push origin "v${current_version}"
        echo "• Successfully pushed tag to remote"
      fi
    else
      echo "• Git tag v${current_version} does not exist locally"
    fi
    
    return 0
  else
    echo "Error: Failed to push to remote"
    return 1
  fi
}

# Parse arguments
COMMAND=""
VERSION=""
MESSAGE=""
FORCE_GITHUB="false"
DRY_RUN="false"

while [[ $# -gt 0 ]]; do
  case $1 in
    current|major|minor|patch|release|tag|verify|update|push)
      COMMAND="$1"
      shift
      ;;
    set)
      COMMAND="set"
      if [[ $# -gt 1 && ! "$2" =~ ^- ]]; then
        VERSION="$2"
        shift
      else
        echo "Error: Version must be provided after 'set' command"
        exit 1
      fi
      shift
      ;;
    -m|--message)
      if [[ $# -gt 1 && ! "$2" =~ ^- ]]; then
        MESSAGE="$2"
        shift
      else
        echo "Error: Message must be provided after -m/--message"
        exit 1
      fi
      shift
      ;;
    -g|--github)
      FORCE_GITHUB="true"
      shift
      ;;
    -d|--dry-run)
      DRY_RUN="true"
      shift
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      echo "Error: Unknown option or command: $1"
      exit 1
      ;;
  esac
done

# Ensure version.properties exists
if [[ ! -f "$VERSION_FILE" ]]; then
  current_version=$(grep -m 1 "<version>" "$RINNA_DIR/pom.xml" | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
  echo "Warning: version.properties not found, creating with version $current_version"
  cat > "$VERSION_FILE" << EOF
version=$current_version
lastUpdated=$(date +%Y-%m-%d)
releaseType=SNAPSHOT
buildNumber=1
EOF
fi

# Process command
case "$COMMAND" in
  current)
    cmd_current
    ;;
  verify)
    cmd_verify
    ;;
  update)
    cmd_update
    ;;
  major)
    cmd_bump_version 0 "$MESSAGE" "$DRY_RUN"
    ;;
  minor)
    cmd_bump_version 1 "$MESSAGE" "$DRY_RUN"
    ;;
  patch)
    cmd_bump_version 2 "$MESSAGE" "$DRY_RUN"
    ;;
  set)
    cmd_set "$VERSION" "$MESSAGE" "$DRY_RUN"
    ;;
  release)
    cmd_release "$MESSAGE" "$FORCE_GITHUB"
    ;;
  tag)
    cmd_tag "$MESSAGE"
    ;;
  push)
    cmd_push
    ;;
  *)
    echo "Error: No command specified"
    show_help
    exit 1
    ;;
esac