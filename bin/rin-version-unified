#!/usr/bin/env bash
#
# rin-version-unified - Streamlined Rinna version management utility
#
# This consolidated script manages all version-related operations including:
# - Version incrementing (major, minor, patch)
# - Version synchronization across all file types
# - Version consistency validation
# - Badge updates in README
# - Build number management
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Constants
RINNA_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
VERSION_FILE="$RINNA_DIR/version.properties"
README_FILE="$RINNA_DIR/README.md"
LOG_DIR="$RINNA_DIR/logs/version"
mkdir -p "$LOG_DIR" 2>/dev/null || true

# Default options
DRY_RUN=false
VERBOSE=false

# Known file patterns - explicit list of files and their version patterns
declare -a VERSION_FILE_PATTERNS=(
  "version.properties:^version=.*:version={version}"
  "version.properties:^version.full=.*:version.full={version}"
  "version.properties:^version.major=.*:version.major={major}"
  "version.properties:^version.minor=.*:version.minor={minor}"
  "version.properties:^version.patch=.*:version.patch={patch}"
  "pom.xml:<version>.*</version>:<version>{version}</version>"
  "rinna-core/pom.xml:<parent>.*</parent>:<parent>\n    <groupId>org.rinna</groupId>\n    <artifactId>Rinna</artifactId>\n    <version>{version}</version>\n  </parent>"
  "rinna-cli/pom.xml:<parent>.*</parent>:<parent>\n    <groupId>org.rinna</groupId>\n    <artifactId>Rinna</artifactId>\n    <version>{version}</version>\n  </parent>"
  "rinna-data-sqlite/pom.xml:<parent>.*</parent>:<parent>\n    <groupId>org.rinna</groupId>\n    <artifactId>Rinna</artifactId>\n    <version>{version}</version>\n  </parent>"
  "api/internal/version/version.go:Version\\s*=\\s*\"[0-9.]+\":Version = \"{version}\""
  "api/pkg/health/version.go:Version\\s*=\\s*\"[0-9.]+\":Version = \"{version}\""
  "version-service/core/version.go:Version\\s*=\\s*\"[0-9.]+\":Version = \"{version}\""
  "pyproject.toml:python_version\\s*=\\s*\"[0-9.]+\":python_version = \"{version}\""
  "README.md:badge/version-[0-9.]+-blue:badge/version-{version}-blue"
  "README.md:build-[0-9]+:build-{build}"
)

# Helper Functions
log() {
  local level="$1" message="$2"
  echo "[$(date +"%H:%M:%S")] [$level] $message"
  if [ "$VERBOSE" = "true" ] || [ "$level" = "ERROR" ]; then
    echo "[$(date +"%H:%M:%S")] [$level] $message" >> "$LOG_DIR/version-$(date +"%Y%m%d").log"
  fi
}

get_version() {
  grep -m 1 "^version=" "$VERSION_FILE" | cut -d'=' -f2
}

get_property() {
  local prop="$1"
  grep -m 1 "^$prop=" "$VERSION_FILE" | cut -d'=' -f2
}

increment_version() {
  local version="$1" index="$2"
  IFS='.' read -r -a parts <<< "$version"
  
  # Increment the specified part
  parts[$index]=$((parts[$index] + 1))
  
  # Reset lower parts to 0
  for ((i=index+1; i<${#parts[@]}; i++)); do
    parts[$i]=0
  done
  
  echo "${parts[0]}.${parts[1]}.${parts[2]}"
}

parse_version() {
  local version="$1"
  if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    log "ERROR" "Invalid version format: $version (should be x.y.z)"
    return 1
  fi
  
  VERSION_MAJOR=$(echo "$version" | cut -d. -f1)
  VERSION_MINOR=$(echo "$version" | cut -d. -f2)
  VERSION_PATCH=$(echo "$version" | cut -d. -f3)
  return 0
}

increment_build_number() {
  local build_number=$(get_property "buildNumber")
  build_number=$((build_number + 1))
  
  if [ "$DRY_RUN" = false ]; then
    sed -i "s/^buildNumber=.*/buildNumber=$build_number/" "$VERSION_FILE"
    log "SUCCESS" "Incremented build number to $build_number"
  else
    log "INFO" "Would increment build number to $build_number"
  fi
}

# Update a specific file's version
update_file_version() {
  local file_pattern="$1" from_version="$2" to_version="$3"
  
  # Parse the pattern
  IFS=':' read -r file_path pattern replacement <<< "$file_pattern"
  local full_path="$RINNA_DIR/$file_path"
  
  # Skip if file doesn't exist
  if [ ! -f "$full_path" ]; then
    log "INFO" "File not found: $file_path - skipping"
    return 0
  fi
  
  # Replace version placeholders in template
  local processed_replacement=$(echo "$replacement" | sed -e "s|{version}|$to_version|g")
  
  # Parse version for major/minor/patch replacement
  parse_version "$to_version"
  processed_replacement=$(echo "$processed_replacement" | \
    sed -e "s|{major}|$VERSION_MAJOR|g" \
        -e "s|{minor}|$VERSION_MINOR|g" \
        -e "s|{patch}|$VERSION_PATCH|g")
  
  # Replace build number if needed
  if [[ "$processed_replacement" == *"{build}"* ]]; then
    local build_number=$(get_property "buildNumber")
    processed_replacement=$(echo "$processed_replacement" | \
      sed -e "s|{build}|$build_number|g")
  fi
  
  # Special handling for parent POM references
  if [[ "$file_path" == *"pom.xml" ]] && [[ "$pattern" == *"</parent>"* ]]; then
    # For parent POM references, use a different approach to find the version within parent tag
    if grep -A 10 "<parent>" "$full_path" | grep -q "<version>"; then
      if [ "$DRY_RUN" = true ]; then
        log "INFO" "Would update parent version in $file_path to $to_version"
        return 0
      fi
      sed -i "/<parent>/,/<\/parent>/s|<version>.*</version>|<version>$to_version</version>|g" "$full_path"
      log "SUCCESS" "Updated parent version in $file_path to $to_version"
      return 0
    else 
      log "WARNING" "Parent version tag not found in $file_path"
      return 0
    fi
  fi
  
  # Check if file contains pattern
  if grep -q "$pattern" "$full_path"; then
    # For dry run mode, just show what would change
    if [ "$DRY_RUN" = true ]; then
      log "INFO" "Would update in $file_path: $pattern -> $processed_replacement"
      return 0
    fi
    
    # Perform the actual update
    if sed -i -e "s|$pattern|$processed_replacement|g" "$full_path"; then
      log "SUCCESS" "Updated $file_path: $pattern -> $processed_replacement"
      return 0
    else
      log "ERROR" "Failed to update $file_path"
      return 1
    fi
  else
    # If main POM file, use a different pattern for the root version
    if [[ "$file_path" == "pom.xml" ]] && [[ "$pattern" == "<version>.*</version>" ]]; then
      # Use line-oriented approach for the root POM
      if grep -q "<version>" "$full_path"; then
        local line_num=$(grep -n "<version>" "$full_path" | head -1 | cut -d: -f1)
        if [ -n "$line_num" ]; then
          if [ "$DRY_RUN" = true ]; then
            log "INFO" "Would update version in $file_path line $line_num to $to_version"
          else
            sed -i "${line_num}s|<version>.*</version>|<version>$to_version</version>|" "$full_path"
            log "SUCCESS" "Updated version in $file_path line $line_num to $to_version"
          fi
          return 0
        fi
      fi
    fi
    
    log "WARNING" "Pattern not found in $file_path: $pattern"
    return 0
  fi
}

# Update badge in README
update_badges() {
  local to_version="$1"
  local build_number=$(get_property "buildNumber")
  
  if [ "$DRY_RUN" = true ]; then
    log "INFO" "Would update README badges: version=$to_version, build=$build_number"
    return 0
  fi
  
  # Update version badge
  if sed -i "s/\(version-\)[0-9.]\+\(-blue\)/\1$to_version\2/g" "$README_FILE"; then
    log "SUCCESS" "Updated version badge in README.md to $to_version"
  else
    log "ERROR" "Failed to update version badge in README.md"
    return 1
  fi
  
  # Update build badge
  if sed -i "s/\(build-\)[0-9]\+/\1$build_number/g" "$README_FILE"; then
    log "SUCCESS" "Updated build badge in README.md to $build_number"
  else
    log "ERROR" "Failed to update build badge in README.md"
    return 1
  fi
  
  return 0
}

# Update all version references in files
update_all_versions() {
  local current_version="$1" new_version="$2"
  local errors=0
  
  log "INFO" "Starting version update: $current_version â†’ $new_version"
  
  # Update each file in the version patterns list
  for pattern in "${VERSION_FILE_PATTERNS[@]}"; do
    if ! update_file_version "$pattern" "$current_version" "$new_version"; then
      errors=$((errors + 1))
    fi
  done
  
  # Update build timestamp in version.properties
  if [ "$DRY_RUN" = false ]; then
    local current_timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    if grep -q "^build.timestamp=" "$VERSION_FILE"; then
      sed -i "s|^build.timestamp=.*|build.timestamp=$current_timestamp|" "$VERSION_FILE"
      log "SUCCESS" "Updated build.timestamp in version.properties"
    fi
    
    if grep -q "^lastUpdated=" "$VERSION_FILE"; then
      sed -i "s|^lastUpdated=.*|lastUpdated=$(date +%Y-%m-%d)|" "$VERSION_FILE"
      log "SUCCESS" "Updated lastUpdated in version.properties"
    fi
  fi
  
  log "INFO" "Version update completed with $errors errors"
  return $errors
}

# Verify version consistency across files
verify_version_consistency() {
  local expected_version=${1:-$(get_version)}
  local quiet=${2:-false}
  local errors=0
  
  if [ "$quiet" = false ]; then
    log "INFO" "Verifying version consistency (expected: $expected_version)"
  fi
  
  # Check version.properties
  local current_version=$(get_version)
  if [ "$current_version" != "$expected_version" ]; then
    log "ERROR" "Version mismatch in version.properties: $current_version (expected: $expected_version)"
    errors=$((errors + 1))
  fi
  
  # Check main pom.xml
  if [ -f "$RINNA_DIR/pom.xml" ]; then
    local pom_version=$(grep -A 1 "<artifactId>Rinna</artifactId>" "$RINNA_DIR/pom.xml" | grep "<version>" | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
    if [ "$pom_version" != "$expected_version" ]; then
      log "ERROR" "Version mismatch in pom.xml: $pom_version (expected: $expected_version)"
      errors=$((errors + 1))
    fi
  fi
  
  # Check child pom.xml files for parent version
  for module in "rinna-core" "rinna-cli" "rinna-data-sqlite"; do
    if [ -f "$RINNA_DIR/$module/pom.xml" ]; then
      local parent_version=$(grep -A 3 "<parent>" "$RINNA_DIR/$module/pom.xml" | grep "<version>" | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
      if [ "$parent_version" != "$expected_version" ]; then
        log "ERROR" "Parent version mismatch in $module/pom.xml: $parent_version (expected: $expected_version)"
        errors=$((errors + 1))
      fi
    fi
  done
  
  # Check Go version files
  for go_file in "api/internal/version/version.go" "api/pkg/health/version.go" "version-service/core/version.go"; do
    if [ -f "$RINNA_DIR/$go_file" ]; then
      local go_version=$(grep 'Version.*=.*"[0-9.]*"' "$RINNA_DIR/$go_file" | head -1 | sed 's/.*"\([0-9.]*\)".*/\1/')
      if [ "$go_version" != "$expected_version" ]; then
        log "ERROR" "Version mismatch in $go_file: $go_version (expected: $expected_version)"
        errors=$((errors + 1))
      fi
    fi
  done
  
  # Check Python version
  if [ -f "$RINNA_DIR/pyproject.toml" ]; then
    local py_version=$(grep "python_version" "$RINNA_DIR/pyproject.toml" | sed 's/.*python_version\s*=\s*"\([0-9.]*\)".*/\1/')
    if [ "$py_version" != "$expected_version" ]; then
      log "ERROR" "Version mismatch in pyproject.toml: $py_version (expected: $expected_version)"
      errors=$((errors + 1))
    fi
  fi
  
  # Report results
  if [ "$errors" -eq 0 ]; then
    if [ "$quiet" = false ]; then
      log "SUCCESS" "Version consistency verified: $expected_version"
    fi
    return 0
  else
    log "ERROR" "Version inconsistency detected: $errors errors found"
    return 1
  fi
}

# Manual update operation
manual_update() {
  local current_version=$(get_version)
  local target_version="$1"
  
  if [ -z "$target_version" ]; then
    log "ERROR" "No target version specified for manual update"
    exit 1
  fi
  
  log "INFO" "Manual version update from $current_version to $target_version"
  
  # Update all version references
  update_all_versions "$current_version" "$target_version"
  
  # Increment build number
  increment_build_number
  
  # Update README badges
  update_badges "$target_version"
  
  # Verify the update
  verify_version_consistency "$target_version"
  
  log "SUCCESS" "Manual version update completed: $current_version â†’ $target_version"
}

# Perform version increment (major, minor, patch)
increment_version_type() {
  local type="$1"
  local current_version=$(get_version)
  local new_version=""
  
  case "$type" in
    major)
      new_version=$(increment_version "$current_version" 0)
      ;;
    minor)
      new_version=$(increment_version "$current_version" 1)
      ;;
    patch)
      new_version=$(increment_version "$current_version" 2)
      ;;
    *)
      log "ERROR" "Invalid version increment type: $type (must be major, minor, or patch)"
      exit 1
      ;;
  esac
  
  log "INFO" "Incrementing $type version: $current_version â†’ $new_version"
  
  # Update all version references
  update_all_versions "$current_version" "$new_version"
  
  # Increment build number
  increment_build_number
  
  # Update README badges
  update_badges "$new_version"
  
  # Verify the update
  verify_version_consistency "$new_version"
  
  log "SUCCESS" "Version increment completed: $current_version â†’ $new_version ($type)"
}

# Display current version information
show_version_info() {
  local current_version=$(get_version)
  local build_number=$(get_property "buildNumber")
  local release_type=$(get_property "releaseType")
  local last_updated=$(get_property "lastUpdated")
  local build_timestamp=$(get_property "build.timestamp")
  
  echo "Rinna Version Information"
  echo "========================="
  echo "Current version: $current_version"
  echo "Build number:    $build_number"
  echo "Release type:    $release_type"
  echo "Last updated:    $last_updated"
  echo "Build timestamp: $build_timestamp"
  echo
  
  # Verify version consistency
  verify_version_consistency "$current_version" true
}

# Display help message
show_help() {
  cat << EOF
Usage: $(basename "$0") [options] COMMAND

Rinna Version Management Utility

Commands:
  current               Display current version information
  verify                Verify version consistency across all files
  major                 Increment major version (X.y.z -> X+1.0.0)
  minor                 Increment minor version (x.Y.z -> x.Y+1.0)
  patch                 Increment patch version (x.y.Z -> x.y.Z+1)
  set VERSION           Set specific version (format: x.y.z)

Options:
  -d, --dry-run         Show changes without making modifications
  -v, --verbose         Show detailed output
  -h, --help            Show this help message

Examples:
  $(basename "$0") current        # Show current version information
  $(basename "$0") patch          # Increment patch version
  $(basename "$0") set 2.0.0      # Set version to 2.0.0
  $(basename "$0") --dry-run minor # Preview minor version increment
EOF
}

# Main execution logic
main() {
  # Parse options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d|--dry-run)
        DRY_RUN=true
        shift
        ;;
      -v|--verbose)
        VERBOSE=true
        shift
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      -*)
        log "ERROR" "Unknown option: $1"
        show_help
        exit 1
        ;;
      *)
        break
        ;;
    esac
  done
  
  # Check for command
  if [ $# -eq 0 ]; then
    show_help
    exit 1
  fi
  
  # Process command
  COMMAND="$1"
  shift
  
  case "$COMMAND" in
    current)
      show_version_info
      ;;
    verify)
      verify_version_consistency
      ;;
    major|minor|patch)
      increment_version_type "$COMMAND"
      ;;
    set)
      if [ $# -eq 0 ]; then
        log "ERROR" "No version specified for 'set' command"
        exit 1
      fi
      manual_update "$1"
      ;;
    *)
      log "ERROR" "Unknown command: $COMMAND"
      show_help
      exit 1
      ;;
  esac
}

# Execute main function
main "$@"