#!/usr/bin/env bash
#
# shell-quality - Quality checks for shell scripts
#
# PURPOSE: Run quality checks on shell scripts in the project
#
# Copyright (c) 2025 Eric C. Mumford (@heymumford)
# This file is subject to the terms and conditions defined in
# the LICENSE file, which is part of this source code package.
# (MIT License)
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Determine script and project directories
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Variables
SHELLCHECK_INSTALLED=false
SHFMT_INSTALLED=false
PASSED=0
FAILED=0
WARNINGS=0
AUTO_FIX=false

# Print error and exit
error() {
  echo -e "${RED}Error: $1${NC}" >&2
  exit 1
}

# Print warning
warning() {
  echo -e "${YELLOW}Warning: $1${NC}" >&2
  WARNINGS=$((WARNINGS + 1))
}

# Print success
success() {
  echo -e "${GREEN}✅ $1${NC}"
  PASSED=$((PASSED + 1))
}

# Print failure
failure() {
  echo -e "${RED}❌ $1${NC}"
  FAILED=$((FAILED + 1))
}

# Print header
header() {
  echo -e "\n${BLUE}$1${NC}"
  echo -e "${BLUE}=======================================${NC}"
}

# Check dependencies
check_dependencies() {
  header "Checking dependencies"
  
  # Check shellcheck
  if command -v shellcheck &>/dev/null; then
    echo -e "✅ shellcheck is installed: $(shellcheck --version | head -n 2 | tail -n 1)"
    SHELLCHECK_INSTALLED=true
  else
    warning "shellcheck is not installed. Some checks will be skipped."
    warning "Install shellcheck with: sudo apt-get install shellcheck"
  fi
  
  # Check shfmt
  if command -v shfmt &>/dev/null; then
    echo -e "✅ shfmt is installed: $(shfmt --version)"
    SHFMT_INSTALLED=true
  else
    warning "shfmt is not installed. Some checks will be skipped."
    warning "Install shfmt with: go install mvdan.cc/sh/v3/cmd/shfmt@latest"
  fi
}

# Find shell scripts
find_scripts() {
  header "Finding shell scripts"
  
  # Find all files with .sh extension
  SH_FILES=$(find "$PROJECT_ROOT/bin" -name "*.sh" -type f)
  
  # Find all executable files with shebang
  EXEC_FILES=$(find "$PROJECT_ROOT/bin" -type f -executable | xargs grep -l "^#!.*bash\|^#!.*sh" 2>/dev/null || echo "")
  
  # Combine and deduplicate
  ALL_SCRIPTS=$(echo -e "$SH_FILES\n$EXEC_FILES" | sort | uniq)
  
  if [ -z "$ALL_SCRIPTS" ]; then
    warning "No shell scripts found."
    return
  fi
  
  echo -e "Found $(echo "$ALL_SCRIPTS" | wc -l) shell scripts"
  echo "$ALL_SCRIPTS"
}

# Basic checks for scripts
basic_checks() {
  header "Running basic checks"
  
  while IFS= read -r script; do
    [ -z "$script" ] && continue
    
    echo -e "\n${YELLOW}Checking: $script${NC}"
    
    # Check executable
    if [ ! -x "$script" ]; then
      warning "$script is not executable"
      if [ "$AUTO_FIX" = true ]; then
        chmod +x "$script"
        echo -e "  Fixed: Made executable"
      fi
    else
      echo -e "  ✓ Executable"
    fi
    
    # Check shebang
    if ! head -n1 "$script" | grep -q "^#!"; then
      failure "$script is missing shebang"
    else
      echo -e "  ✓ Has shebang"
    fi
    
    # Check for common bad practices
    if grep -q "exec " "$script" && ! grep -q "exec.*\"\$@\"" "$script"; then
      warning "$script may not pass arguments to exec command"
    fi
    
    if grep -q "\[ \$? -" "$script"; then
      warning "$script uses \$? which can be unreliable. Consider using set -e or explicit error handling"
    fi
    
    # Check for dangerous rm commands - ignoring the check in this script itself
    if [[ "$script" != "$SCRIPT_PATH" ]] && grep -q "rm -rf /" "$script"; then
      failure "$script contains potentially dangerous 'rm -rf /' command"
    fi
    
    # Check for error handling
    if ! grep -q "set -e" "$script" && ! grep -q "trap.*EXIT" "$script"; then
      warning "$script may not handle errors properly. Consider adding 'set -e'"
      if [ "$AUTO_FIX" = true ]; then
        # Add set -e after shebang if not already present
        sed -i '1,/^#!.*$/!{0,/^[^#]/{/set -e/!s/^/set -e\n/}}' "$script"
        echo -e "  Fixed: Added set -e"
      fi
    else
      echo -e "  ✓ Error handling present"
    fi
  done <<< "$ALL_SCRIPTS"
}

# Run shellcheck if available
run_shellcheck() {
  if [ "$SHELLCHECK_INSTALLED" = false ]; then
    warning "Skipping shellcheck checks"
    return
  fi
  
  header "Running shellcheck"
  
  while IFS= read -r script; do
    [ -z "$script" ] && continue
    
    echo -e "\n${YELLOW}Checking: $script${NC}"
    
    # Run shellcheck
    if shellcheck -x "$script"; then
      success "$script passes shellcheck"
    else
      failure "$script has shellcheck issues"
    fi
  done <<< "$ALL_SCRIPTS"
}

# Run shfmt if available
run_shfmt() {
  if [ "$SHFMT_INSTALLED" = false ]; then
    warning "Skipping shfmt formatting checks"
    return
  fi
  
  header "Running shfmt"
  
  while IFS= read -r script; do
    [ -z "$script" ] && continue
    
    echo -e "\n${YELLOW}Checking: $script${NC}"
    
    # Check formatting
    if shfmt -d "$script"; then
      success "$script is properly formatted"
    else
      failure "$script has formatting issues"
      
      if [ "$AUTO_FIX" = true ]; then
        shfmt -w "$script"
        echo -e "  Fixed: Reformatted file"
      else
        echo -e "  Run 'shfmt -w $script' to fix formatting"
      fi
    fi
  done <<< "$ALL_SCRIPTS"
}

# Parse arguments
parse_args() {
  for arg in "$@"; do
    case $arg in
      --fix)
        AUTO_FIX=true
        shift
        ;;
      --help)
        echo "Usage: $0 [--fix]"
        echo "  --fix    Auto-fix issues when possible"
        echo "  --help   Show this help message"
        exit 0
        ;;
    esac
  done
}

# Show summary
show_summary() {
  header "Summary"
  echo -e "${GREEN}Passed: $PASSED${NC}"
  echo -e "${RED}Failed: $FAILED${NC}"
  echo -e "${YELLOW}Warnings: $WARNINGS${NC}"
  
  if [ $FAILED -eq 0 ]; then
    echo -e "\n${GREEN}All critical checks passed!${NC}"
    [ $WARNINGS -gt 0 ] && echo -e "${YELLOW}Consider addressing the warnings.${NC}"
  else
    echo -e "\n${RED}Some checks failed. Please fix the issues.${NC}"
    exit 1
  fi
}

# Main function
main() {
  parse_args "$@"
  
  echo -e "${BLUE}Shell Quality Checker${NC}"
  echo -e "${BLUE}======================${NC}"
  
  check_dependencies
  find_scripts
  basic_checks
  run_shellcheck
  run_shfmt
  show_summary
}

main "$@"