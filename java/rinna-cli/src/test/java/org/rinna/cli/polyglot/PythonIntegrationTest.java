package org.rinna.cli.polyglot;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;
import org.rinna.cli.polyglot.framework.PolyglotTestHarness;
import org.rinna.cli.polyglot.java.JavaCliTester;
import org.rinna.cli.polyglot.python.PythonTester;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Integration tests for Python components using the polyglot test harness.
 * These tests verify that Python scripts can interact with Java components
 * and generate expected outputs like C4 architecture diagrams.
 */
@Tag("polyglot")
@Tag("integration")
public class PythonIntegrationTest {
    private static final Logger logger = LoggerFactory.getLogger(PythonIntegrationTest.class);
    
    private PolyglotTestHarness harness;
    private PythonTester pythonTester;
    private JavaCliTester javaTester;
    
    @BeforeEach
    void setUp(TestInfo testInfo) throws IOException {
        logger.info("Starting test: {}", testInfo.getDisplayName());
        
        // Initialize the test harness
        harness = new PolyglotTestHarness().initialize();
        
        // Initialize component testers
        pythonTester = new PythonTester(harness);
        javaTester = new JavaCliTester(harness);
    }
    
    @AfterEach
    void tearDown() {
        if (harness != null) {
            harness.cleanup();
        }
    }
    
    @Test
    @DisplayName("Should run C4 diagram tests successfully")
    void shouldRunC4DiagramTestsSuccessfully() throws Exception {
        // Run the C4 diagram tests
        String output = pythonTester.runC4DiagramTests(true);
        
        // Verify the output indicates the tests passed
        assertTrue(output.contains("OK") || output.contains("Ran"), "C4 diagram tests should run successfully");
        assertFalse(output.contains("FAILED"), "C4 diagram tests should not fail");
    }
    
    @Test
    @DisplayName("Should generate C4 diagrams successfully")
    void shouldGenerateC4DiagramsSuccessfully() throws Exception {
        // Generate C4 diagrams
        List<String> diagramTypes = Arrays.asList("context", "container", "component");
        String output = pythonTester.generateC4Diagrams(diagramTypes, "svg", false);
        
        // Verify diagrams were generated
        assertTrue(output.contains("Diagram generation complete") || 
                output.contains("Generated"), "Diagrams should be generated successfully");
        
        // Each diagram type should be mentioned in the output
        for (String type : diagramTypes) {
            assertTrue(output.contains(type) || output.toLowerCase().contains(type), 
                    "Output should mention " + type + " diagram generation");
        }
    }
    
    @Test
    @DisplayName("Python script should be able to create test fixture from Java data")
    void pythonScriptShouldCreateTestFixtureFromJavaData() throws Exception {
        // Create a Python script that processes data from a Java-generated file
        String pythonScript = 
                "import sys\n" +
                "import json\n" +
                "import os\n\n" +
                "# Read input file (generated by Java)\n" +
                "input_file = sys.argv[1]\n" +
                "output_file = sys.argv[2]\n\n" +
                "with open(input_file, 'r') as f:\n" +
                "    data = json.load(f)\n\n" +
                "# Process the data (convert work items to different format)\n" +
                "processed_data = {\n" +
                "    'items': [{\n" +
                "        'id': item['id'],\n" +
                "        'name': item['title'],\n" +
                "        'status': item['status'],\n" +
                "        'metadata': {\n" +
                "            'type': item['type'],\n" +
                "            'priority': item['priority']\n" +
                "        }\n" +
                "    } for item in data['workItems']]\n" +
                "}\n\n" +
                "# Write to output file\n" +
                "with open(output_file, 'w') as f:\n" +
                "    json.dump(processed_data, f, indent=2)\n\n" +
                "print(f'Processed {len(processed_data[\"items\"])} items')\n";
        
        // Create a Java-generated JSON file with work items
        String javaGeneratedJson = 
                "{\n" +
                "  \"workItems\": [\n" +
                "    {\n" +
                "      \"id\": \"item-001\",\n" +
                "      \"title\": \"Implement Python integration\",\n" +
                "      \"type\": \"TASK\",\n" +
                "      \"status\": \"IN_PROGRESS\",\n" +
                "      \"priority\": \"HIGH\"\n" +
                "    },\n" +
                "    {\n" +
                "      \"id\": \"item-002\",\n" +
                "      \"title\": \"Create C4 diagrams\",\n" +
                "      \"type\": \"TASK\",\n" +
                "      \"status\": \"NEW\",\n" +
                "      \"priority\": \"MEDIUM\"\n" +
                "    },\n" +
                "    {\n" +
                "      \"id\": \"item-003\",\n" +
                "      \"title\": \"Update documentation\",\n" +
                "      \"type\": \"DOCUMENTATION\",\n" +
                "      \"status\": \"NEW\",\n" +
                "      \"priority\": \"LOW\"\n" +
                "    }\n" +
                "  ]\n" +
                "}";
        
        // Create the test files
        Path inputFile = harness.getTestTempDir().resolve("work_items.json");
        Path outputFile = harness.getTestTempDir().resolve("processed_items.json");
        Path scriptFile = pythonTester.createTestScript("process_items.py", pythonScript);
        
        // Write the Java-generated JSON to the input file
        java.nio.file.Files.writeString(inputFile, javaGeneratedJson);
        
        // Execute the Python script
        String output = pythonTester.executeTestScript("process_items.py", 
                inputFile.toString(), outputFile.toString());
        
        // Verify the output
        assertTrue(output.contains("Processed 3 items"), "Script should report processing 3 items");
        
        // Read the generated output file
        String processedJson = java.nio.file.Files.readString(outputFile);
        
        // Verify the content was transformed correctly
        assertTrue(processedJson.contains("\"name\": \"Implement Python integration\""), 
                "Output should contain transformed item name");
        assertTrue(processedJson.contains("\"metadata\": {"), 
                "Output should contain transformed metadata structure");
    }
    
    @Test
    @DisplayName("Java CLI and Python code should run in parallel with proper coordination")
    void javaCliAndPythonCodeShouldRunInParallelWithProperCoordination() throws Exception {
        // Create a Python script that generates a test file
        String pythonScript = 
                "import sys\n" +
                "import json\n" +
                "import time\n" +
                "import os\n\n" +
                "# Generate test data\n" +
                "output_file = sys.argv[1]\n" +
                "item_count = int(sys.argv[2])\n\n" +
                "data = {\n" +
                "    'workItems': [{\n" +
                "        'id': f'py-item-{i:03d}',\n" +
                "        'title': f'Python generated item {i}',\n" +
                "        'type': 'TASK',\n" +
                "        'status': 'NEW',\n" +
                "        'priority': 'MEDIUM'\n" +
                "    } for i in range(1, item_count + 1)]\n" +
                "}\n\n" +
                "# Simulate some processing time\n" +
                "print('Python: Generating test data...')\n" +
                "time.sleep(1)\n\n" +
                "# Write to output file\n" +
                "with open(output_file, 'w') as f:\n" +
                "    json.dump(data, f, indent=2)\n\n" +
                "print(f'Python: Generated {item_count} test items in {output_file}')\n";
        
        // Create the Python script file
        Path scriptFile = pythonTester.createTestScript("generate_items.py", pythonScript);
        Path outputFile = harness.getTestTempDir().resolve("python_items.json");
        
        // Execute both Python and Java in parallel
        harness.executeParallel(
                // Java code to run
                () -> {
                    try {
                        System.out.println("Java: Creating Java test items...");
                        
                        // Create 5 work items using the Java CLI
                        for (int i = 1; i <= 5; i++) {
                            String title = "Java generated item " + i;
                            javaTester.executeCliScript("add", 
                                    "--title", "\"" + title + "\"", 
                                    "--type", "TASK", 
                                    "--priority", "MEDIUM");
                        }
                        
                        System.out.println("Java: Created 5 test items");
                        
                        // Wait for Python to generate its file
                        Path pythonOutputFile = harness.getTestTempDir().resolve("python_items.json");
                        while (!java.nio.file.Files.exists(pythonOutputFile)) {
                            System.out.println("Java: Waiting for Python output file...");
                            Thread.sleep(500);
                        }
                        
                        // Read Python generated file
                        String pythonItems = java.nio.file.Files.readString(pythonOutputFile);
                        System.out.println("Java: Reading Python output: " + 
                                pythonItems.substring(0, Math.min(50, pythonItems.length())) + "...");
                    } catch (Exception e) {
                        throw new RuntimeException("Java execution failed", e);
                    }
                },
                
                // Python command to run
                "python " + scriptFile.toString() + " " + outputFile.toString() + " 7",
                
                // No additional Python command
                null,
                
                // Timeout in seconds
                30
        );
        
        // Verify that both Java and Python parts completed
        assertTrue(java.nio.file.Files.exists(outputFile), "Python should have created the output file");
        
        // Read the Python generated file
        String pythonOutput = java.nio.file.Files.readString(outputFile);
        
        // Verify content
        assertTrue(pythonOutput.contains("\"id\": \"py-item-001\""), "Output should contain Python-generated items");
        assertTrue(pythonOutput.contains("\"title\": \"Python generated item"), "Output should contain Python-generated titles");
    }
}