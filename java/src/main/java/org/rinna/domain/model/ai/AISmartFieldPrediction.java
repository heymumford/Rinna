/*
 * Domain model for AI-based field predictions
 *
 * Copyright (c) 2025 Eric C. Mumford (@heymumford)
 * This file is subject to the terms and conditions defined in
 * the LICENSE file, which is part of this source code package.
 */

package org.rinna.domain.model.ai;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/**
 * Represents a prediction for a specific field in a work item.
 * <p>
 * Predictions are generated by AI models based on historical data patterns
 * and can be used to automate field population and improve data quality.
 * </p>
 */
public record AISmartFieldPrediction(
    UUID id,
    UUID workItemId,
    String fieldName,
    Object predictedValue,
    double confidenceScore,
    Set<String> evidenceFactors,
    String modelId,
    LocalDateTime createdAt,
    boolean userAccepted
) {
    /**
     * Constructor with validation.
     */
    public AISmartFieldPrediction {
        Objects.requireNonNull(id, "id must not be null");
        Objects.requireNonNull(workItemId, "workItemId must not be null");
        Objects.requireNonNull(fieldName, "fieldName must not be null");
        Objects.requireNonNull(predictedValue, "predictedValue must not be null");
        Objects.requireNonNull(modelId, "modelId must not be null");
        Objects.requireNonNull(createdAt, "createdAt must not be null");
        
        // Validate confidence score is between 0 and 1
        if (confidenceScore < 0 || confidenceScore > 1) {
            throw new IllegalArgumentException("confidenceScore must be between 0 and 1");
        }
        
        // Create defensive copy of mutable collections
        if (evidenceFactors != null) {
            evidenceFactors = Collections.unmodifiableSet(Set.copyOf(evidenceFactors));
        } else {
            evidenceFactors = Collections.emptySet();
        }
    }
    
    /**
     * Creates a new instance with updated user acceptance status.
     *
     * @param accepted Whether the prediction was accepted by the user
     * @return A new AISmartFieldPrediction with updated status
     */
    public AISmartFieldPrediction withUserAccepted(boolean accepted) {
        return new AISmartFieldPrediction(
            this.id,
            this.workItemId,
            this.fieldName,
            this.predictedValue,
            this.confidenceScore,
            this.evidenceFactors,
            this.modelId,
            this.createdAt,
            accepted
        );
    }
    
    /**
     * Returns a builder for creating AISmartFieldPrediction instances.
     * 
     * @return A new builder
     */
    public static Builder builder() {
        return new Builder();
    }
    
    /**
     * Builder for AISmartFieldPrediction.
     */
    public static class Builder {
        private UUID id = UUID.randomUUID();
        private UUID workItemId;
        private String fieldName;
        private Object predictedValue;
        private double confidenceScore;
        private Set<String> evidenceFactors = Collections.emptySet();
        private String modelId;
        private LocalDateTime createdAt = LocalDateTime.now();
        private boolean userAccepted = false;
        
        /**
         * Sets the ID.
         * 
         * @param id The ID
         * @return This builder
         */
        public Builder id(UUID id) {
            this.id = id;
            return this;
        }
        
        /**
         * Sets the work item ID.
         * 
         * @param workItemId The work item ID
         * @return This builder
         */
        public Builder workItemId(UUID workItemId) {
            this.workItemId = workItemId;
            return this;
        }
        
        /**
         * Sets the field name.
         * 
         * @param fieldName The field name
         * @return This builder
         */
        public Builder fieldName(String fieldName) {
            this.fieldName = fieldName;
            return this;
        }
        
        /**
         * Sets the predicted value.
         * 
         * @param predictedValue The predicted value
         * @return This builder
         */
        public Builder predictedValue(Object predictedValue) {
            this.predictedValue = predictedValue;
            return this;
        }
        
        /**
         * Sets the confidence score.
         * 
         * @param confidenceScore The confidence score
         * @return This builder
         */
        public Builder confidenceScore(double confidenceScore) {
            this.confidenceScore = confidenceScore;
            return this;
        }
        
        /**
         * Sets the evidence factors.
         * 
         * @param evidenceFactors The evidence factors
         * @return This builder
         */
        public Builder evidenceFactors(Set<String> evidenceFactors) {
            this.evidenceFactors = evidenceFactors;
            return this;
        }
        
        /**
         * Sets the AI model ID.
         * 
         * @param modelId The model ID
         * @return This builder
         */
        public Builder modelId(String modelId) {
            this.modelId = modelId;
            return this;
        }
        
        /**
         * Sets the creation timestamp.
         * 
         * @param createdAt The creation timestamp
         * @return This builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Sets the user acceptance status.
         * 
         * @param userAccepted Whether the user accepted the prediction
         * @return This builder
         */
        public Builder userAccepted(boolean userAccepted) {
            this.userAccepted = userAccepted;
            return this;
        }
        
        /**
         * Builds a new AISmartFieldPrediction instance.
         * 
         * @return A new AISmartFieldPrediction
         */
        public AISmartFieldPrediction build() {
            return new AISmartFieldPrediction(
                id,
                workItemId,
                fieldName,
                predictedValue,
                confidenceScore,
                evidenceFactors,
                modelId,
                createdAt,
                userAccepted
            );
        }
    }
}