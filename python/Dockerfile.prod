# Multi-stage build for Python services in Rinna
# Optimized for production deployment with minimal image size

# -----------------------------------------------------------------------------
# BASE STAGE - Common dependencies and setup
# -----------------------------------------------------------------------------
FROM python:3.10-slim AS base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH=/app

WORKDIR /app

# Install system dependencies 
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    # Dependencies for WeasyPrint and PDF rendering
    libpango-1.0-0 \
    libpangoft2-1.0-0 \
    libpangocairo-1.0-0 \
    libcairo2 \
    libgdk-pixbuf2.0-0 \
    libffi-dev \
    poppler-utils \
    # Clean up
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better layer caching
COPY requirements.txt requirements-core.txt ./

# -----------------------------------------------------------------------------
# BUILDER STAGE - Install dependencies and build packages
# -----------------------------------------------------------------------------
FROM base AS builder

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements.txt

# Copy Python package and build
COPY python/ /app/python/

# Build packages
RUN cd /app/python && SETUP_PACKAGE=lucidchart-py pip install --no-cache-dir --user -e . && \
    cd /app/python && SETUP_PACKAGE=rinna pip install --no-cache-dir --user -e .

# -----------------------------------------------------------------------------
# TEST STAGE - For running tests
# -----------------------------------------------------------------------------
FROM base AS test

# Create a non-root user for running tests
RUN groupadd -g 1001 appuser && \
    useradd -u 1001 -g appuser -m -s /bin/bash appuser

# Create directories for test outputs
RUN mkdir -p /app/test-output /app/coverage /app/logs && \
    chown -R appuser:appuser /app

# Copy dependencies from builder stage
COPY --from=builder /root/.local /home/appuser/.local
ENV PATH=/home/appuser/.local/bin:$PATH

# Copy Python package 
COPY python/ /app/python/

# Create reports directory
RUN mkdir -p /app/python/rinna/reports/templates/css && \
    chown -R appuser:appuser /app/python/rinna/reports

# Copy test scripts
COPY bin/test-python-pyramid.sh /app/bin/
RUN chmod +x /app/bin/test-python-pyramid.sh

# Set user for running tests
USER appuser

# Set entrypoint for test container
ENTRYPOINT ["/app/bin/test-python-pyramid.sh", "--isolated", "--system-python"]
CMD ["all"]

# -----------------------------------------------------------------------------
# DEVELOPMENT STAGE - For local development
# -----------------------------------------------------------------------------
FROM test AS development

USER root

# Install development tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    vim \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install --no-cache-dir ipython debugpy jupyter

# Reset to appuser for safety
USER appuser

# Set entrypoint for development container
ENTRYPOINT ["/bin/bash"]

# -----------------------------------------------------------------------------
# PRODUCTION STAGE - Minimal production image
# -----------------------------------------------------------------------------
FROM python:3.10-slim AS production

# Create a non-root user
RUN groupadd -g 1001 appuser && \
    useradd -u 1001 -g appuser -m -s /bin/bash appuser

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH=/home/appuser/.local/bin:$PATH \
    ENVIRONMENT=production \
    PORT=5000 \
    LOG_LEVEL=INFO \
    REPORTS_DIR=/app/reports

WORKDIR /app

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    # Dependencies for PDF rendering
    libpango-1.0-0 \
    libpangoft2-1.0-0 \
    libpangocairo-1.0-0 \
    libcairo2 \
    libgdk-pixbuf2.0-0 \
    libffi-dev \
    poppler-utils \
    && rm -rf /var/lib/apt/lists/*

# Copy only the built packages and dependencies from builder
COPY --from=builder /root/.local /home/appuser/.local
COPY --from=builder /app/python/rinna /app/rinna/

# Copy essential configs and templates
COPY --chown=appuser:appuser python/rinna/api /app/rinna/api/
COPY --chown=appuser:appuser python/rinna/reports/templates /app/rinna/reports/templates/

# Create app directories with proper permissions
RUN mkdir -p /app/data /app/logs /app/reports /app/rinna/reports/templates/css && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose service port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Set entrypoint for production container
ENTRYPOINT ["python", "-m"]
CMD ["uvicorn", "rinna.api.main:app", "--host", "0.0.0.0", "--port", "5000"]